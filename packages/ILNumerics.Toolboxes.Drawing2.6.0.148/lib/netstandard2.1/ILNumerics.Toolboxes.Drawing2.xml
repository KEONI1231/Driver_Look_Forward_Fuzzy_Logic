<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILNumerics.Toolboxes.Drawing2</name>
    </assembly>
    <members>
        <member name="T:ILNumerics.Drawing.Plotting.BarPlot">
            <summary>
            The class creates a bar plot object (horizontal, vertical, 2D, 3D).
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarPlotTag">
            <summary>
            Tag identifying all bar plot objects within the scene graph
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarPlotAxisXTag">
            <summary>
            Tag identifying this bar plot's X axis, unique for each bar plot.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarPlotAxisYTag">
            <summary>
            Tag identifying this bar plot's Y axis, unique for each bar plot.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarPlotAxisZTag">
            <summary>
            Tag identifying this bar plot's Z axis, unique for each bar plot.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarBorderTag">
            <summary>
            Tag identifying all bar plot's bar's border's lines within the scene graph.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.BarFillTag">
            <summary>
            Tag identifying all bar plot's bar's fill's triangle shapes within the scene graph.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlot.NextColors">
            <summary>
            Color enumerator used to color subsequent bars. 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Border">
            <summary>
            Gets access to the border line shape of the bar plot [readonly].
            </summary>
            <remarks>One single <see cref="T:ILNumerics.Drawing.LineStrip"/> object is used for the borders of all bars.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Fill">
            <summary>
            Gets access to the triangles shape used for rendering the bars fill area [readonly].
            </summary>
            <remarks>A single <see cref="T:ILNumerics.Drawing.TrianglesStrip"/> shape is used for <em>all</em> bars.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Draw3D">
            <summary>
            Gets or sets whether the bars are rendered as 3D objects. 
            </summary>
            <remarks>
            <para>Boolean parameter defining the 3D style of the bars. If set to true, each 
            bar will be drawn as 3D cube, otherwise, as flat rectangle.</para>
            <para>By default, <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.Draw3D"/> is false.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Horizontal">
            <summary>
            Get or sets the rendering style of the bar plot.
            </summary>
            <remarks>
            <para>Boolean parameter defining the rendering style of the bars. If set to true, each bar will be drawn 
            horizontally, otherwise vertically (default).</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.BarWidth">
            <summary>
            Gets or sets the bar width.
            </summary>
            <remarks>
            <para><see cref="P:ILNumerics.Drawing.Plotting.BarPlot.BarWidth"/> defines the width of each bar as a scalar value from 0 to 1. Default is 0.8f, 
            that means the bar width is 80% of the space from the previous bar to the next bar. If set to 1.0f, each bar touch one another.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If value set to negative value or value is larger than 1.</exception>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Padding">
            <summary>
            Gets or sets the distance between groups.
            </summary>
            <remarks>
            <para>Parameter must be a scalar value from 0.0f to 1.0f. Padding is available only if <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.Style"/> is set to grouped. Default value is 0.2f, 
            that means that, bar groups are distanced at 20% from maximal <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.BarWidth"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If bar width value is negative or more than 1.0f</exception>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Style">
            <summary>
            Controls the way the bars of multiple groups are arranged.
            </summary>
            <remarks>
            <para>All possible values from the <see cref="T:ILNumerics.Drawing.Plotting.BarPlotStyle"/> enumeration.</para>
            <para>See: <see href="http://ilnumerics.net/bar-plots.html"/> for examples for each style.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.BaseValue">
            <summary>
            Get or sets the location for the baseline. 
            </summary>
            <remarks>
            <para>Parameter specified as a scalar value.</para> // TODO: this is already clear from the type (float)! Instead, describe the meaning of 'baseline'!
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.UseLighting">
            <summary>
            Determines, if the bar plot utilizes lighting. Default: Auto (<c>null</c>, light for flat bar plots, no light for 3D bar plots)
            </summary>
            <remarks><para>By default, <see cref="T:ILNumerics.Drawing.Plotting.BarPlot"/> utilizes lighting for 2D bars only. Light gives the bars a highlighting effect and 
            improves the niceness of the bars. However, since <see cref="T:ILNumerics.Drawing.Plotting.BarPlot"/> focusses on fast rendering, such lighting brings 
            certain limitations for sophisticated 3D bars (<see cref="P:ILNumerics.Drawing.Plotting.BarPlot.Draw3D"/>). In order to achieve good performance, such 3D bars are not optimized for 
            perfect lighting. Hence, lighting is disabled for <see cref="T:ILNumerics.Drawing.Plotting.BarPlot"/> in 3D mode by default.</para>
            <para>One can overwrite this default behavior by assigning an explicit boolean value to <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.UseLighting"/>. This affects all bars, 
            regardless if rendered in 2D or 3D mode.</para>
            <para>See <see cref="T:ILNumerics.Drawing.Plotting.BarPlotEx"/> for creating bar plots which focus on nice colors and lighting in 3D mode.</para>
            </remarks>
            <seealso cref="P:ILNumerics.Drawing.Plotting.BarPlot.Draw3D"/>
            <seealso cref="T:ILNumerics.Drawing.Plotting.BarPlotEx"/>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Axis">
            <summary>
            Gets the axis of BarPlot.
            </summary>
            <remarks>
            <para>Property returns working axis object, for current customisation.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Ticks">
            <summary>
            Property gets or sets working axis ticks of current BarPlot.
            </summary>        
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.SetTick(System.Int32,System.String)">
            <summary>
            Sets custom tick label by ID.
            </summary>
            <param name="ID">Scalar value, defines an indentifier of tick on working axes.</param>
            <param name="tickLabel">Label text string.</param>
            <remarks>Method allows to set a custom tick label on working axis.</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Object,ILNumerics.Drawing.Plotting.BarPlotStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Single,System.Single,System.Boolean,System.Boolean)">
             <summary>
             Creates a new Bar plot based on provided values <paramref name="Y"/>.
             </summary>
             <param name="Y">Vector or matrix defines bar values to draw.</param>
             <param name="X">[Optional] Vector or matrix defines positions of bars to draw. If not set, bars positions will be placed(or grouped) on range [1,2,..,n].</param>
             <param name="tag">[Optional] Tag identifying the plot in the scene</param>
             <param name="style">[Optional] Bar plot style specified by one of the values from BarPlotStyle. Default: <see cref="F:ILNumerics.Drawing.Plotting.BarPlotStyle.grouped"/></param>
             <param name="borderColor">[Optional] Color of the bar border, default: Color.Black, if border color is set, then defined border color will be assigned to all bar groups.</param>
             <param name="fillColor">[Optional] Fill color of the bar, default: auto (sequencing individual colors via NextColors provider), if fill color is set, then defined fill color will be assigned to all bar groups.</param>
             <param name="lineWidth">[Optional] Bar border width, default: 1px</param>
             <param name="lineStyle">[Optional] Line style, default: solid</param>
             <param name="barWidth">[Optional] Bar width specified as single value from 0 to 1. Default: 0.8f. If <paramref name="barWidth"/> is 1.0f, then the bars within a group touch one another</param>
             <param name="baseValue">[Optional] Base value specified as scalar value. Default: 0.0f, see also <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.BaseValue"/> property.</param>
             <param name="draw3DBars">[Optional] Drawing style parameter. If set to true, each bar will be drawn as 3D bar, otherwise, as flat rectangles. Default:false.</param>
             <param name="drawHorizontal">[Optional] Drawing style parameter. If set to true, all bars will be drawn horizontally, otherwise, vertically. Default:false.</param>
             <remarks>
             <para>If <paramref name="Y"/> is specified as vector, BarPlot draws one group of bars. If <paramref name="Y"/> is specified as matrix [m x n], BarPlot draws m groups of n bars.</para>
             <para>The following optional parameters: <paramref name="style"/>, <paramref name="barWidth"/>, <paramref name="baseValue"/>, <paramref name="draw3DBars"/> and
             <paramref name="drawHorizontal"/> could be changed by using public properties.</para>
             <para>If <paramref name="style"/> defined as <see cref="F:ILNumerics.Drawing.Plotting.BarPlotStyle.detached"/>, it takes effect only if <paramref name="draw3DBars"/> is set to true.</para>         
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<double> Points = rand(4, 3);        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.detached, draw3DBars: true);         
                });
                
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> has different shape than <paramref name="Y"/> See: <see href="http://ilnumerics.net/bar-plots.html"/> for allowed shapes definitions.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Object,ILNumerics.Drawing.Plotting.BarPlotStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Single,System.Single,System.Boolean,System.Boolean)">
             <summary>
             Creates a new Bar plot based on provided values <paramref name="Y"/>.
             </summary>
             <param name="Y">Vector or matrix defines bar values to draw.</param>
             <param name="X">[Optional] Vector or matrix defines positions of bars to draw. If not set, bars positions will be placed(or grouped) on range [1,2,..,n].</param>
             <param name="tag">[Optional] Tag identifying the plot in the scene</param>
             <param name="style">[Optional] Bar plot style specified by one of the values from BarPlotStyle. Default: <see cref="F:ILNumerics.Drawing.Plotting.BarPlotStyle.grouped"/></param>
             <param name="borderColor">[Optional] Color of the bar border, default: Color.Black, if border color is set, then defined border color will be assigned to all bar groups.</param>
             <param name="fillColor">[Optional] Fill color of the bar, default: auto (sequencing individual colors via NextColors provider), if fill color is set, then defined fill color will be assigned to all bar groups.</param>
             <param name="lineWidth">[Optional] Bar border width, default: 1px</param>
             <param name="lineStyle">[Optional] Line style, default: solid</param>
             <param name="barWidth">[Optional] Bar width specified as single value from 0 to 1. Default: 0.8f. If <paramref name="barWidth"/> is 1.0f, then the bars within a group touch one another</param>
             <param name="baseValue">[Optional] Base value specified as scalar value. Default: 0.0f, see also <see cref="P:ILNumerics.Drawing.Plotting.BarPlot.BaseValue"/> property.</param>
             <param name="draw3DBars">[Optional] Drawing style parameter. If set to true, each bar will be drawn as 3D bar, otherwise, as flat rectangles. Default:false.</param>
             <param name="drawHorizontal">[Optional] Drawing style parameter. If set to true, all bars will be drawn horizontally, otherwise, vertically. Default:false.</param>
             <remarks>
             <para>If <paramref name="Y"/> is specified as vector, BarPlot draws one group of bars. If <paramref name="Y"/> is specified as matrix [m x n], BarPlot draws m groups of n bars.</para>
             <para>The following optional parameters: <paramref name="style"/>, <paramref name="barWidth"/>, <paramref name="baseValue"/>, <paramref name="draw3DBars"/> and
             <paramref name="drawHorizontal"/> could be changed by using public properties.</para>
             <para>If <paramref name="style"/> defined as <see cref="F:ILNumerics.Drawing.Plotting.BarPlotStyle.detached"/>, it takes effect only if <paramref name="draw3DBars"/> is set to true.</para>         
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<float> Points = tosingle(rand(4, 3));        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.detached, draw3DBars: true);         
                });
                
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> has different shape than <paramref name="Y"/> See: <see href="http://ilnumerics.net/bar-plots.html"/> for allowed shapes definitions.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.Update(ILNumerics.InArray{System.Double},ILNumerics.Array{System.Double})">
             <summary>
             Method updates key values of each bar in bar plot.
             </summary>        
             <param name="Y">Vector or matrix array with new key values</param>
             <param name="X">[Optional] Vector or matrix defines positions of bars to draw. If not set, bars positions will be placed(or grouped) on range [1,2,..,n].</param>
             <remarks>
             <para>Method recalculates new values to draw bar plot.</para>
             <para>If <paramref name="Y"/> shape or size were changed after constructor calls, the default fill and border colors will be assigned.</para>
             <para>See: <see href="http://ilnumerics.net/bar-plots.html"/> for allowed shapes definitions.</para>
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<double> Points = rand(2, 5);        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.grouped, draw3DBars: true);         
                });
                
                // update bar plot with new values: result 2 groups, each 5 bars
                Points = pow(Points,2);
                ilPanel1.Scene.First<BarPlot>().Update(Points);
            
                // update bar plot with new values: result 5 groups, each 2 bars
                ilPanel1.Scene.First<BarPlot>().Update(Points.T);
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> has different shape than <paramref name="Y"/> See: <see href="http://ilnumerics.net/bar-plots.html"/> for allowed shapes definitions.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})">
             <summary>
             Method updates key values of each bar in bar plot.
             </summary>        
             <param name="Y">Vector or matrix array with new key values</param>
             <param name="X">[Optional] Vector or matrix defines positions of bars to draw. If not set, bars positions will be placed(or grouped) on range [1,2,..,n].</param>
             <remarks>
             <para>Method recalculates new values to draw bar plot.</para>
             <para>If <paramref name="Y"/> shape or size were changed after constructor calls, the default fill and border colors will be assigned.</para>
             <para>See: <see href="http://ilnumerics.net/bar-plots.html"/> for allowed shapes definitions.</para>
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<double> Points = rand(2, 5);        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, by default all bars will be filled with blue color
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.grouped, draw3DBars: true);         
                });
                
                // update bar plot with new values: result 2 groups, each 5 bars
                Points = pow(Points,2);
                ilPanel1.Scene.First<BarPlot>().Update(Points);
            
                // update bar plot with new values: result 5 groups, each 2 bars
                ilPanel1.Scene.First<BarPlot>().Update(Points.T);
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has more than 2 dimensions.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> has different shape than <paramref name="Y"/></exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.SetGroupColor(System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
             <summary>
             Method sets custom border and fill color to group of bars by <paramref name="ID"/>.
             </summary>
             <param name="ID">Group ID number[0,n]. An integer value defines a group ID to assign a custom color.</param>
             <param name="borderColor">[Optional] Border color of the bar group selected by <paramref name="ID"/>, default: null - skip changing border color.</param>     
             <param name="fillColor">[Optional] Fill color of the bar group selected by <paramref name="ID"/>, default: null - skip changing fill color.</param>
             <remarks>
             <para>If bar plot is defined with vector array, SetGroupColor, sets a color to all bars. ID must be equal 0.</para>
             <para>If bar plot is defined with matrix, SetGroupColor, sets a color to whole bar group, defined by <paramref name="ID"/>. </para>
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<double> Points = rand(3, 4);        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, by default all bars will be filled with blue color
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.grouped, draw3DBars: true);         
                });
                
                // change fill color of bar group #3 to red
                ilPanel1.Scene.First<BarPlot>().SetGroupColor(2, fillColor: Color.Red);
             
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentOutOfRangeException">If selected <paramref name="ID"/> not exists.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.SetBarColor(System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
             <summary>
             Method sets custom border and fill color to single Bar by <paramref name="ID"/>.
             </summary>
             <param name="ID">Bar ID number[0,N], where N is number of elements Y. An integer value defines a bar ID to assign a custom color.</param>
             <param name="borderColor">[Optional] Border color of the single bar selected by <paramref name="ID"/>, default: null - skip changing border color.</param>     
             <param name="fillColor">[Optional] Fill color of the single bar selected by <paramref name="ID"/>, default: null - skip changing fill color.</param>
             <remarks>
             </remarks>
             
             <example><para>Example creates and draws BarPlot</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a random set of points
                Array<double> Points = rand(1, 10);        
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, by default all bars will be filled with blue color
                     new BarPlot(Points, barWidth: 0.6f, style: BarPlot.BarPlotStyle.grouped, draw3DBars: true);         
                });
                
                // change fill color of bar #3 to red
                ilPanel1.Scene.First<BarPlot>().SetBarColor(2, fillColor: Color.Red);
             
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentOutOfRangeException">If selected <paramref name="ID"/> not exists.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy of BarPlot.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.Copy">
            <summary>
            Creates a copy of BarPlot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            Synchronizes the synchronized copy of BarPlot.
            </summary>
            <param name="copy"></param>
            <param name="syncParams"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.Configure(System.Boolean,System.Boolean)">
            <summary>
            In any event of changes, this method is called to update BarPlot and its axes.
            </summary>
            <param name="configureChildren"></param>
            <param name="configurePath2Root"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.BeginVisit(ILNumerics.Drawing.RenderParameter)">
            <summary>
            This method is called at the beginning of the rendering process.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.ConfigureLegendVisual(ILNumerics.Drawing.Group,System.Int32)">
            <summary>
            Creates visual representation for the line.
            </summary>
            <param name="renderArea">Root group node for visual output; must provide coord system [0,0,0] -> [1,1,1].</param>
            <param name="subItemID">Sub item ID corresponding to the bar group ID.</param>
            <remarks>This function is used by legends for rendering.</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.ConfigureLegendLabel(ILNumerics.Drawing.Group,System.Int32)">
            <summary>
            Creates textual / label representation for the line.
            </summary>
            <param name="renderArea">Root group node for visual output; must provide coord system [0,0,0] -> [1,1,1].</param>
            <param name="subItemID">Sub item ID corresponding to the bar group ID.</param>
            <remarks>This function is used by legends for rendering.</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.GetID">
            <summary>
            Gets the ID of the bar plot.
            </summary>        
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.GetVersion">
            <summary>
            Gets the modification version of the bar plot.
            </summary>        
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlot.GetItemCount">
            <summary>
            Gets the bar group count.
            </summary>        
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Positions">
            <summary>
            Provides positions of line vertices
            </summary>
            <remarks>This function is used by markers for rendering</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlot.Indices">
            <summary>
            Provides indices of line vertices
            </summary>
            <remarks>This function is used by markers for rendering</remarks>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.BarPlotEx">
            <summary>
            The class creates a colormapped 3D bar surface plot object.
            </summary>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.BarPlotEx.ColorModes">
            <summary>
            Colormap styles
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotEx.ColorModes.Solidmapped">
            <summary>
            Uniform solid 3D bar coloring according to colormap.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotEx.ColorModes.Colormapped">
            <summary>
            [Default] Colorbar coloring according to its height.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotEx.BarPlotExTag">
            <summary>
            Tag identifying all bar plot objects within the scene graph
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotEx.BarPlotExWireframeTag">
            <summary>
            Tag identifying all bar plot's bar's border's lines within the scene graph.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotEx.BarPlotExFillTag">
            <summary>
            Tag identifying all bar plot's bar's fill's triangle shapes within the scene graph.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.Border">
            <summary>
            Gets access to the border line shape of the bar plot [readonly].
            </summary>
            <remarks>One single <see cref="T:ILNumerics.Drawing.LineStrip"/> object is used for the borders of all bars.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.Fill">
            <summary>
            Gets access to the triangles shape used for rendering the bars fill area [readonly].
            </summary>
            <remarks>A single <see cref="T:ILNumerics.Drawing.Triangles"/> shape is used for <em>all</em> bars.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.BarWidth">
            <summary>
            Gets or sets the bar width.
            </summary>
            <remarks>
            <para><see cref="P:ILNumerics.Drawing.Plotting.BarPlotEx.BarWidth"/> defines the width of each bar as a scalar value from 0 to 1. Default is 0.8f, 
            that means the bar width is 80% of the space from the previous bar to the next bar. If set to 1.0f, each bar touch one another.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If value set to negative value or value is larger than 1.</exception>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.BaseValue">
            <summary>
            Get or sets the location for the baseline. 
            </summary>
            <remarks>
            <para>Parameter specified as a scalar value.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.UseLighting">
            <summary>
            Determines, if the bar plot utilizes lighting. By default is set to false.
            </summary>        
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.Colormap">
            <summary>
            Gets the colormap used for coloring or sets it 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.IsColormapped">
            <summary>
            Returns true or false if colormap is used for bars coloring.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BarPlotEx.ColorMode">
            <summary>
            Gets or sets the selected coloring mode for bar plot.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.Drawing.Plotting.Colormap,System.Object)">
             <summary>
             Creates a new colormapped bar plot, provide Z values, X and Y ranges arrays.
             </summary>
             <param name="Z">Positions data for the grid points, scalar, vector or matrix of size [m x n]</param>
             <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1] or a scalar</param>
             <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0] or a scalar</param>
             <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
             <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
             <remarks>
             <para>Parameter<paramref name="Z"/> could be specified as scalar, vector or 2D matrix[m x n]. If <paramref name="Z"/> is specified as matrix, <paramref name="X"/> and <paramref name="Y"/> 
             could be also specified as vectors: <paramref name="X"/> size of m and <paramref name="Y"/> size of n; or matrices size of [m x n].</para>
             <para>If <paramref name="Z"/> is specified as scalar, default coordinates <paramref name="X"/>, <paramref name="Y"/> are 0, 0. A single bar will be drawn.</para>
             <para><paramref name="colormap"/> is an optional parameter specified as Colormaps enumeration to define colormap template to fill the faces. By default colormap is set to 'ILNumerics'.</para>
             </remarks>
             
             <example><para>Example creates and draws BarPlotEx object</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlotEx(Z:SpecialData.sincf(20, 20, 1.5f), colormap: Colormaps.Jet);         
                });
                
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has wrong size according to Z.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has wrong size according to Z.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> or <paramref name="Y"/> has different shape than <paramref name="Z"/></exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Object)">
             <summary>
             Creates a new colormapped bar plot, provide Z values, X and Y ranges arrays.
             </summary>
             <param name="Z">Positions data for the grid points, scalar, vector or matrix of size [m x n]</param>
             <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1] or a scalar</param>
             <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0] or a scalar</param>
             <param name="colormap">[optional] Colormap to be used for colormappings, default: 'ILNumerics'</param>
             <param name="tag">[optional]tag used to identify the surface within the scene graph</param>
             <remarks>
             <para>Parameter<paramref name="Z"/> could be specified as scalar, vector or 2D matrix[m x n]. If <paramref name="Z"/> is specified as matrix, <paramref name="X"/> and <paramref name="Y"/> 
             could be also specified as vectors: <paramref name="X"/> size of m and <paramref name="Y"/> size of n; or matrices size of [m x n].</para>
             <para>If <paramref name="Z"/> is specified as scalar, default coordinates <paramref name="X"/>, <paramref name="Y"/> are 0, 0. A single bar will be drawn.</para>
             <para><paramref name="colormap"/> is an optional parameter specified as Colormaps enumeration to define colormap template to fill the faces. By default colormap is set to 'ILNumerics'.</para>
             </remarks>
             
             <example><para>Example creates and draws BarPlotEx object</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlotEx(Z:SpecialData.sincf(20, 20, 1.5f), colormap: Colormaps.Jet);         
                });
                
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Y"/> is null or <paramref name="Y"/> has wrong size according to Z.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> is empty or <paramref name="X"/> has wrong size according to Z.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="X"/> or <paramref name="Y"/> has different shape than <paramref name="Z"/></exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.Update(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double})">
             <summary>
             Method updates key values of each bar in bar plot.
             </summary>
             <param name="Z">Positions data for the grid points, matrix of size [m x n]</param>
             <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1]</param>
             <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0]</param>
             
             <example><para>Example creates and updates BarPlotEx object</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlotEx(Z:SpecialData.sincf(20, 20, 1.5f), colormap: Colormaps.Jet);         
                });
                
                // init any dataset as matrix
                Array<float> PointsNew = counter<float>(0, 0.1, 5, 6, 1);
                ilPanel1.Scene.First<BarPlotEx>().Update(ZXYPositions: PointsNew);
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Z"/> is null.</exception> 
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})">
             <summary>
             Method updates key values of each bar in bar plot.
             </summary>
             <param name="Z">Positions data for the grid points, matrix of size [m x n]</param>
             <param name="X">X range: a matrix of size Z.S or a vector of length Z.S[1]</param>
             <param name="Y">Y range: a matrix of size Z.S or a vector of length Z.S[0]</param>
             
             <example><para>Example creates and updates BarPlotEx object</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // draw bar plot, 3D detached
                     new BarPlotEx(Z:SpecialData.sincf(20, 20, 1.5f), colormap: Colormaps.Jet);         
                });
                
                // init any dataset as matrix
                Array<float> PointsNew = counter<float>(0, 0.1, 5, 6, 1);
                ilPanel1.Scene.First<BarPlotEx>().Update(ZXYPositions: PointsNew);
             
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If <paramref name="Z"/> is null.</exception> 
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.Copy">
            <summary>
            Creates a copy of BarPlotEx.
            </summary>    
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy of BarPlotEx.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            Synchronizes the synchronized copy of BarPlotEx.
            </summary>
            <param name="copy"></param>
            <param name="syncParams"> contains parameters to synchronize.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.Configure(System.Boolean,System.Boolean)">
            <summary>
            In any event of change, this this method is called to update BarPlotEx.
            </summary>
            <param name="configureChildren"></param>
            <param name="configurePath2Root"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.GetRangeMinValue(ILNumerics.Drawing.AxisNames)">
            <summary>
            Returns the minimum Z value.
            </summary>
            <param name="AxisName"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.GetRangeMaxValue(ILNumerics.Drawing.AxisNames)">
            <summary>
            Returns the maximum Z value.
            </summary>
            <param name="AxisName"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BarPlotEx.ScaleMode(ILNumerics.Drawing.AxisNames)">
            <summary>
            Returns the scale mode of the axis.
            </summary>
            <param name="AxisName"></param>
            <returns></returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.BoxPlot">
            <summary>
            A class used to create error bars.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.DefaultTag">
            <summary>
            Default tag used to identify box plots objects in the scene: "BoxPlot".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.FillAreaTag">
            <summary>
            Default tag used to identify fill areas of box plots in the scene: "FillArea".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.FrameTag">
            <summary>
            Default tag used to identify frames of box plots in the scene: "Frame".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.MedianTag">
            <summary>
            Default tag used to identify medians of box plots in the scene: "Median".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerVLineTag">
            <summary>
            Default tag used to identify vertical whisker lines of box plots in the scene: "WhiskerVLines".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerHLineTag">
            <summary>
            Default tag used to identify horizontal whisker lines of box plots in the scene: "WhiskerHLines".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BoxPlot.ScatteredPlotTag">
            <summary>
            Default tag used to identify scattered plots of box plots in the scene: "ScatteredPlot".
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.FillArea">
            <summary>
            Provides a reference to the fill areas of box plots
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.FillArea"/> property allows direct access to the triangles strip, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal triangles strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.FillArea"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.FillArea"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.Frame">
            <summary>
            Provides a reference to the frames of box plots
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Frame"/> property allows direct access to the line strip, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Frame"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Frame"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/>  
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.Median">
            <summary>
            Provides a reference to the medians of box plots
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Median"/> property allows direct access to the line strip, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Median"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.Median"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/>  
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerVLine">
            <summary>
            Provides a reference to the vertical whisker lines of box plots
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerVLine"/> property allows direct access to the line strip, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerVLine"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerVLine"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerHLine">
            <summary>
            Provides a reference to the horizontal whisker lines of box plots.
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerHLine"/> property allows direct access to the line strip, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerHLine"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.WhiskerHLine"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/>  
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.BoxPlot.ScatteredPlot">
            <summary>
            Provides a reference to the scattered plots of box plots.
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.ScatteredPlot"/> property allows direct access to the points, partly defining BoxPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.BoxPlot"/> modify internal data and therefore also the internal point shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.ScatteredPlot"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.BoxPlot.ScatteredPlot"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.#ctor(ILNumerics.Drawing.Plotting.BoxPlot)">
            <summary>
            Copy constructor.
            </summary>               
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Double,System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Single,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines BoxPlot on the basis of the row vector <paramref name="X"/> and the matrix <paramref name="Data"/>.
            </summary>
            <param name="X">Row vector that contains horizontal or vertical positions of each box plot.</param>
            <param name="Data">Matrix that contains data. For each column a box plot is drawn.</param>
            <param name="boxWidth">[optional] Width of box plots, default: 0.6.</param>
            <param name="drawScatteredPlot">[optional] Draws an additional scattered plot based on <paramref name="Data"/> when set to true, default: false.</param>
            <param name="drawVertical">[optional] Draws box plots vertical or horizontal when set to false, default: true.</param>
            <param name="fillAreaColor">[optional] Color of fill areas, default: White.</param>
            <param name="frameColor">[optional] Color of frames, default: Black.</param>
            <param name="medianColor">[optional] Color of medians, default: Black.</param>
            <param name="whiskerColor">[optional] Color of whiskers, default: Black.</param>
            <param name="pointColor">[optional] Color of scattered plots or outliers, default: Black.</param>
            <param name="frameWidth">[optional] Line width of frames, default: 1px.</param>
            <param name="medianWidth">[optional] Line width of medians, default: 2px.</param>
            <param name="whiskerWidth">[optional] Line width of whiskers, defualt: 1px.</param>
            <param name="pointSize">[optional] Size of points of scattered plots or outliers, default: 5.</param>
            <param name="frameStyle">[optional] Linestyle of frames, default: solid.</param>
            <param name="medianStyle">[optional] Linestyle of medians, default: solid.</param>
            <param name="whiskerStyle">[optional] Linestyle of whiskers, default: dashed.</param>
            <param name="tag">[optional] Identifies the BarPlot object in the scene graph.</param>
            <example><para>Creating an BoxPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
            Array<float> X = linspace<float>(1, 3, 2);
            Array<float> Data = new float[,] { { 10, 2, 1, 0, 2, 4 }, { 8, 9, 8, 0, 10, 7 } };
            var plotCube = ilPanel1.Scene.Add(new PlotCube());
            var boxPlot = plotCube.Add(new BoxPlot(X, Data, boxWidth: 1));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Double,System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Single,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines BoxPlot on the basis of the row vector <paramref name="X"/> and the matrix <paramref name="Data"/>
            </summary>
            <param name="X">Row vector that contains horizontal or vertical positions of each box plot.</param>
            <param name="Data">Matrix that contains data. For each column a box plot is drawn.</param>
            <param name="boxWidth">[optional] Width of box plots, default: 0.6.</param>
            <param name="drawScatteredPlot">[optional] Draws an additional scattered plot based on <paramref name="Data"/> when set to true, default: false.</param>
            <param name="drawVertical">[optional] Draws box plots vertical or horizontal when set to false, default: true.</param>
            <param name="fillAreaColor">[optional] Color of fill areas, default: White.</param>
            <param name="frameColor">[optional] Color of frames, default: Black.</param>
            <param name="medianColor">[optional] Color of medians, default: Black.</param>
            <param name="whiskerColor">[optional] Color of whiskers, default: Black.</param>
            <param name="pointColor">[optional] Color of scattered plots or outliers, default: Black.</param>
            <param name="frameWidth">[optional] Line width of frames, default: 1px.</param>
            <param name="medianWidth">[optional] Line width of medians, default: 2px.</param>
            <param name="whiskerWidth">[optional] Line width of whiskers, defualt: 1px.</param>
            <param name="pointSize">[optional] Size of points of scattered plots or outliers, default: 5.</param>
            <param name="frameStyle">[optional] Linestyle of frames, default: solid.</param>
            <param name="medianStyle">[optional] Linestyle of medians, default: solid.</param>
            <param name="whiskerStyle">[optional] Linestyle of whiskers, default: dashed.</param>
            <param name="tag">[optional] Identifies the BarPlot object in the scene graph.</param>
            <example><para>Creating an BoxPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
            Array<double> X = linspace<double>(1, 5, 3);
            Array<double> Data = new float[,] { { 8, 5, 6, 7, 5, 9, -5, -4, 4, 3 },
                    { 20, 7, 5, 5, 6, 2, 3, 15, 4, 1 }, { 9, 9, 0, 18, 12, 11, 6, 8, 10, 7 } };
            var plotCube = ilPanel1.Scene.Add(new PlotCube());
            var boxPlot = plotCube.Add(new BoxPlot(X, Data, boxWidth: 1, fillAreaColor: Color.CornflowerBlue,
            frameColor: Color.DarkBlue, medianColor: Color.DarkBlue, whiskerColor: Color.DarkBlue,
            pointColor: Color.OrangeRed));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})">
            <summary>
            Call this method to update horizontal or vertical position of the box plots <paramref name="X"/> and the underlying data <paramref name="Data"/>.
            </summary>
            <param name="X">[optional] Row vector that contains horizontal or vertical positions of each box plot.</param>
            <param name="Data">[optional] Matrix that contains data. For each column a box plot is drawn.</param>
            <example><para>Creating an BoxPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
            Array<float> X = linspace<float>(1, 3, 2);
            Array<float> Data = new float[,] { { 1, 1, 1, 1 }, { 1, 1, 1, 1 } };
            var plotCube = ilPanel1.Scene.Add(new PlotCube());
            var boxPlot = plotCube.Add(new BoxPlot(X, Data, boxWidth: 1, fillAreaColor: Color.Olive,
            medianColor: Color.DarkRed, medianStyle: DashStyle.Dashed, medianWidth: 4, whiskerStyle: DashStyle.Dotted,
            pointColor: Color.DarkRed, drawVertical: false, drawScatteredPlot: true));
            Data = new float[,] { { 1, 3, 4, 5, 7 }, { 10, 2, 1, 0, 2, } };
            boxPlot.Update(Data: Data);
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="X"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="Data"/> is not a matrix.</exception>
            <exception cref="T:System.ArgumentException"> If number of elements in rows of input argument <paramref name="Data"/> and <paramref name="X"/> is not equal.</exception>
            <exception cref="T:System.ArgumentException"> If number of elements in columns of input argument <paramref name="Data"/> are less than 4.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.BoxPlot.getLimitsInternal(System.Collections.Generic.Stack{ILNumerics.Drawing.Matrix4},ILNumerics.Drawing.Limits,System.Boolean,System.Nullable{ILNumerics.Drawing.Vector3})">
            <summary>
            Computes new limits for BoxPlot.
            </summary>
            <param name="transforms"> matrix stack that contains transformation matrixes.</param>
            <param name="ret"> contains limits of CandleStick.</param>
            <param name="ignoreRootTransform"></param>
            <param name="lowerBound"></param>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.Candlestick">
            <summary>
            A class used to create error bars.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.DefaultTag">
            <summary>
            Default tag used to identify Candlestick objects in the scene: "Candlestick".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BullShadowTag">
            <summary>
            Default tag used to identify shadows of bull candlesticks in the scene: "BullFrame".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BearShadowTag">
            <summary>
            Default tag used to identify shadows of bear candlesticks in the scene: "BearFrame".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BullFrameTag">
            <summary>
            Default tag used to identify frames of bull candlesticks in the scene: "BullFrame".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BearFrameTag">
            <summary>
            Default tag used to identify frames of bear candlesticks in the scene: "BearFrame".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BullFillAreaTag">
            <summary>
            Default tag used to identify triangles of bull candlesticks in the scene: "BullFillArea". 
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Candlestick.BearFillAreaTag">
            <summary>
            Default tag used to identify triangles of bear candlesticks in the scene: "BearFillArea". 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BullShadow">
            <summary>
            Provides a reference to the lines of the shadows of bull candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullShadow"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullShadow"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullShadow"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BearShadow">
            <summary>
            Provides a reference to the lines of the shadows of bull candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearShadow"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearShadow"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearShadow"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BullFrame">
            <summary>
            Provides a reference to the lines of the frame of bull candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFrame"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFrame"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFrame"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BearFrame">
            <summary>
            Provides a reference to the lines of the frame of bear candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFrame"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFrame"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFrame"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BullFillArea">
            <summary>
            Provides a reference to the triangles of fill area of bull candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFillArea"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFillArea"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BullFillArea"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.Candlestick.BearFillArea">
            <summary>
            Provides a reference to the triangles of fill area of bear candlesticks
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFillArea"/> property allows direct access to the line plot, partly defining CandleStick.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.Candlestick"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFillArea"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.Candlestick.BearFillArea"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.Drawing.Plotting.Candlestick)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the row vectors <paramref name="X"/>, <paramref name="Low"/>,
            <paramref name="High"/>, <paramref name="Open"/> and <paramref name="Close"/>
            </summary>
            <param name="X">Row vector that usually contains periods.</param>
            <param name="Low">Row vector that contains lowest price for each period.</param>
            <param name="High">Row vector that contains highest price for each period.</param>
            <param name="Open">Row vector that contains opening price for each period. </param>
            <param name="Close">Row vector that contains closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            int n = 10;
            Array<float> X = linspace<float>(0, 9, n);
            Array<float> Low = ones<float>(1, n);
            Array<float> High = ones<float>(1, n) + 4;
            Array<float> Open = new float[] { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 };
            Array<float> Close = new float[] { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 };
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(X, Low, High, Open.T, Close.T, bodyWidth: 0.1f));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the row vectors <paramref name="X"/>, <paramref name="Low"/>,
            <paramref name="High"/>, <paramref name="Open"/> and <paramref name="Close"/>
            </summary>
            <param name="X">Row vector that usually contains periods.</param>
            <param name="Low">Row vector that contains lowest price for each period.</param>
            <param name="High">Row vector that contains highest price for each period.</param>
            <param name="Open">Row vector that contains opening price for each period. </param>
            <param name="Close">Row vector that contains closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            int n = 10;
            Array<double> X = linspace<double>(0, 9, n);
            Array<double> Low = ones<double>(1, n);
            Array<double> High = ones<double>(1, n) + 4;
            Array<double> Open = new double[] { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 };
            Array<double> Close = new double[] { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 };
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(X, Low, High, Open.T, Close.T, bodyWidth: 0.1f));
            }
            ]]></code>
            </example>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the row vector <paramref name="X"/>, the arrays <paramref name="Shadow"/> and
            <paramref name="Body"/>
            </summary>
            <param name="X">Row vector that usually contains periods.</param>
            <param name="Shadow">(2 x n) Array that contains lowest and highest price for each period.</param>
            <param name="Body">(2 x n) Array that contains opening and closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            int n = 10;
            Array<float> X = linspace<float>(0, 9, n);
            Array<float> Shadow = ones<float>(1, n);
            Shadow[1,full] = ones<float>(1, n) + 4;
            Array<float> Body = new float[,] { { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 }, { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 } };
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(X, Shadow, Body.T, bodyWidth: 0.1f,
            bullFillColor: Color.Olive, bearFillColor: Color.DarkRed,
            bullFrameStyle: DashStyle.Dashed, bearFrameStyle: DashStyle.Dashed,
            bullShadowStyle: DashStyle.Dashed, bearShadowStyle: DashStyle.Dashed));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Shadow"/> is not a (2 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Body"/> is not a (2 x n) array.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the row vector <paramref name="X"/>, the arrays <paramref name="Shadow"/> and
            <paramref name="Body"/>
            </summary>
            <param name="X">Row vector that usually contains periods.</param>
            <param name="Shadow">(2 x n) Array that contains lowest and highest price for each period.</param>
            <param name="Body">(2 x n) Array that contains opening and closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            int n = 10;
            Array<double> X = linspace<double>(0, 9, n);
            Array<double> Shadow = ones<double>(1, n);
            Shadow[1,full] = ones<double>(1, n) + 4;
            Array<double> Body = new double[,] { { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 }, { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 } };
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(X, Shadow, Body.T, bodyWidth: 0.1f,
            bullFillColor: Color.Olive, bearFillColor: Color.DarkRed,
            bullFrameStyle: DashStyle.Dashed, bearFrameStyle: DashStyle.Dashed,
            bullShadowStyle: DashStyle.Dashed, bearShadowStyle: DashStyle.Dashed));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Shadow"/> is not a (2 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Body"/> is not a (2 x n) array.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Single},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the array <paramref name="Data"/>
            </summary>
            <param name="Data">(5 x n) Array that contains time periods, lowest,highest, opening and closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            Array<float> Data = new float[,] { {0,1,2,3,4,5,6,7,8,9 }, {1,1,1,1,1,1,1,1,1,1 },
                    {5,5,5,5,5,5,5,5,5,5 }, { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 }, { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 }};
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(Data.T, bodyWidth: 0.1f,
            bullFillColor: Color.CornflowerBlue, bearFillColor: Color.Orange,
            bullFrameColor: Color.CornflowerBlue, bearFrameColor: Color.Orange,
            bullShadowColor: Color.CornflowerBlue, bearShadowColor: Color.Orange));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Data"/> is not a (5 x n) array.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.#ctor(ILNumerics.InArray{System.Double},System.Single,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Int32,System.Int32,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines Candlestick on the basis of the array <paramref name="Data"/>
            </summary>
            <param name="Data">(5 x n) Array that contains time periods, lowest,highest, opening and closing price for each period.</param>
            <param name="bodyWidth">[optional] Width of candlestick bodies, default: 0.05.</param>
            <param name="bullShadowColor">[optional] Line color of bull candlestick shadows, default: Black.</param>
            <param name="bearShadowColor">[optional] Line color of bear candlestick shadows, default: Black.</param>
            <param name="bullFrameColor">[optional] Line color of bull candlestick frames, default: Black.</param>
            <param name="bearFrameColor">[optional] Line color of bear candlestick frames, default: Black.</param>
            <param name="bullFillColor">[optional] Color of bull candlestick fill areas, default: White.</param>
            <param name="bearFillColor">[optional] Color of bear candlestick fill areas, default: Black.</param>
            <param name="bullShadowWidth">[optional] Line width of bull candlestick shadow, default: 2px.</param>
            <param name="bearShadowWidth">[optional] Line width of bear candlestick shadow, default: 2px.</param>
            <param name="bullFrameWidth">[optional] Line width of bull candlestick frame, default: 2px.</param>
            <param name="bearFrameWidth">[optional] Line with of bear candlestick frame, default: 2px.</param>
            <param name="bullShadowStyle">[optional] Line style of bull candlestick shadow, default: Solid.</param>
            <param name="bearShadowStyle">[optional] Line style of bear candlestick shadow, default: Solid.</param>
            <param name="bullFrameStyle">[optional] Line Style of bull candlestick frame, default: Solid.</param>
            <param name="bearFrameStyle">[optional] Line Style of bear candlestick frame, default: Solid.</param>
            <param name="tag">[optional] Identifies Candlestick objects in the scene graph.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            // Create Data
            Array<double> Data = new double[,] { {0,1,2,3,4,5,6,7,8,9 }, {1,1,1,1,1,1,1,1,1,1 },
                    {5,5,5,5,5,5,5,5,5,5 }, { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 }, { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 }};
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(Data.T, bodyWidth: 0.05f,
            bullFillColor: Color.CornflowerBlue, bearFillColor: Color.Orange,
            bullFrameColor: Color.CornflowerBlue, bearFrameColor: Color.Orange,
            bullShadowColor: Color.CornflowerBlue, bearShadowColor: Color.Orange));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Data"/> is not a (5 x n) array.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})">
            <summary>
            Call this method to update time periods, lowest and highest price during each time period, opening and closing price of each time period
            </summary>
            <param name="X">Row Vector that contains time periods.</param>
            <param name="Low">Row Vector that contains lowest price of each time period.</param>
            <param name="High">Row Vector that contains highest price of each time period.</param>
            <param name="Open">Row Vector that contains opening price of each time period. </param>
            <param name="Close">Row Vector that contains closing price of each time period.</param>
            <example><para>Creation of an Candlestick object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            int n = 10;
            Array<float> X = linspace<float>(0, 9, n);
            Array<float> Low = ones<float>(1, n);
            Array<float> High = ones<float>(1, n) + 4;
            Array<float> Open = new float[] { 1, 2, 3, 2, 1, 4, 5, 3, 4, 5 };
            Array<float> Close = new float[] { 2, 1, 2, 4, 5, 3, 3, 4, 1, 5 };
            var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
            var myCandlestick = myPlotCube.Add(new Candlestick(X, Low, High, Open.T, Close.T, bodyWidth: 0.1f));
            Close = ones<float>(1, n) * 3;
            myCandlestick.Update(Close: Close);
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Low"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="High"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Open"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Close"/> is not a row vector.</exception>
            /// <exception cref="T:System.ArgumentException">If input arguments are not of the same size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.Candlestick.getLimitsInternal(System.Collections.Generic.Stack{ILNumerics.Drawing.Matrix4},ILNumerics.Drawing.Limits,System.Boolean,System.Nullable{ILNumerics.Drawing.Vector3})">
            <summary>
            Computes new limits for CandleStick.
            </summary>
            <param name="transforms"> matrix stack that contains transformation matrixes.</param>
            <param name="ret"> contains limits of CandleStick.</param>
            <param name="ignoreRootTransform"></param>
            <param name="lowerBound"></param>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.ErrorBarPlot">
            <summary>
            A class used to create error bars.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.ErrorBarPlot.DefaultTag">
            <summary>
            Default tag used to identify the ErrorBar object in the scene: "ErrorBarPlot".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.ErrorBarPlot.LinePlotTag">
            <summary>
            Default tag used to identify the line plot in the scene: "LinePlot".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.ErrorBarPlot.ErrorBarTag">
            <summary>
            Default tag used to identify the error bar in the scene: "ErrorBar".
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.LinePlot">
            <summary>
            Provides a reference to the line plot used to realize all lines of ErrorBarPlot.
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.LinePlot"/> property allows direct access to the line plot object, partly defining ErrorBarPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.ErrorBarPlot"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.LinePlot"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.LinePlot"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.ErrorBar">
            <summary>
            Provides a reference to the line plot of ErrorBarPlot
            </summary>
            <remarks><para> The <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.ErrorBar"/> property allows direct access to the lines of the error bar, partly defining ErrorBarPlot.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, as well as the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.ErrorBarPlot"/> modify internal data and therefore also the internal line plot shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.ErrorBar"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.ErrorBarPlot.ErrorBar"/>, caused by manual changed and by changes due 
            to the <see cref="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})"/> 
            function.</para>
            </remarks>        
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor(ILNumerics.Drawing.Plotting.ErrorBarPlot)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Int32,System.Single,ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines ErrorBarPlot on the basis of the row vectors <paramref name="X"/>,
            <paramref name="Y"/>, <paramref name="L"/> and <paramref name="T"/>
            </summary>
            <param name="X">Row vector that contains x coordinates of an arbitrary two dimensional curve.</param>
            <param name="Y">Row vector that contains y coordinates of an arbitrary two dimensional curve.</param>
            <param name="L">Row vector that contains distance between bottom of error bar to vertex of curve.</param>
            <param name="T">Row vector that contains distance between top of error bar to vertex of curve.</param>
            <param name="drawVertical">[optional] Draws error bars vertical or horizontal when set to false, default: true</param>
            <param name="visibleLine">[optional] Displays line plot when set to true, default: true</param>
            <param name="errorbarColor">[optional] Line color of error bar, default: Red</param>
            <param name="errorbarLineWidth">[optional] Line width of error bar, default: 1px</param>
            <param name="errorbarWidth">[optional] Width of error bar, default: 0.025</param>
            <param name="markerStyle">[optional] Marker style, default: Dot</param>
            <param name="markerColor">[optional] Marker color, default: Blue</param>
            <param name="lineColor">[optional] Line color, default: Blue</param>
            <param name="lineWidth">[optional] Line width, default: 1px</param>
            <param name="lineStyle">[optional] Line style, default: solid</param>
            <param name="tag">[optional] Identifies the ErrorBarPlot object in the scene graph</param>
            <example><para>Creating an ErrorBarPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
                // Generate Data
                Array<float> X = linspace<float>(0, 9, 10);
                Array<float> Y = sin(X);
                Array<float> L = ones<float>(1, 10) * 0.4f;
                Array<float> T = ones<float>(1, 10) * 0.2f;
                // Create PlotCube object
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // Create ErrorBarPlot object
                var myErrorBarPlot = myPlotCube.Add(new ErrorBarPlot(X, Y, L, T));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Y"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> 
            and <paramref name="Y"/> are not of the same size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Int32,System.Single,ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines ErrorBarPlot on the basis of the row vectors <paramref name="X"/>,
            <paramref name="Y"/>, <paramref name="L"/> and <paramref name="T"/>
            </summary>
            <param name="X">Row vector that contains x coordinates of an arbitrary two dimensional curve.</param>
            <param name="Y">Row vector that contains y coordinates of an arbitrary two dimensional curve.</param>
            <param name="L">Row vector that contains distance between bottom of error bar to vertex of curve.</param>
            <param name="T">Row vector that contains distance between top of error bar to vertex of curve.</param>
            <param name="drawVertical">[optional] Draws error bars vertical or horizontal when set to false, default: true</param>
            <param name="visibleLine">[optional] Displays line plot when set to true, default: true</param>
            <param name="errorbarColor">[optional] Line color of error bar, default: Red</param>
            <param name="errorbarLineWidth">[optional] Line width of error bar, default: 1px</param>
            <param name="errorbarWidth">[optional] Width of error bar, default: 0.025</param>
            <param name="markerStyle">[optional] Marker style, default: Dot</param>
            <param name="markerColor">[optional] Marker color, default: Blue</param>
            <param name="lineColor">[optional] Line color, default: Blue</param>
            <param name="lineWidth">[optional] Line width, default: 1px</param>
            <param name="lineStyle">[optional] Line style, default: solid</param>
            <param name="tag">[optional] Identifies the ErrorBarPlot object in the scene graph</param>
            <example><para>Creating an ErrorBarPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
                // Generate Data
                Array<double> X = linspace<double>(-5, 5, 15);
                Array<float> Y = cos(X);
                Array<double> L = ones<double>(1, 15) * 0.6;
                Array<double> T = ones<double>(1, 15) * 0.2;
                // Create PlotCube object
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // Create ErrorBarPlot object
                var myErrorBarPlot = myPlotCube.Add(new ErrorBarPlot(X, Y, L, T, drawVertical: false));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Y"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> 
            and <paramref name="Y"/> are not of the same size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Int32,System.Single,ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines ErrorBarPlot on the basis of the matrix <paramref name="XY"/> and the row vectors 
            <paramref name="L"/> and <paramref name="T"/>
            </summary>
            <param name="XY">Matrix that contains x and y coordinates of an arbitrary two dimensional curve.</param>
            <param name="L">Row vector that contains distance between bottom of error bar to vertex of curve.</param>
            <param name="T">[optional] Row vector that contains distance between top of error bar to vertex of curve, default: <paramref name="L"/>.</param>
            <param name="drawVertical">[optional] Draws error bars vertical or horizontal when set to false, default: true</param>
            <param name="visibleLine">[optional] Displays line plot when set to true, default: true</param>
            <param name="errorbarColor">[optional] Line color of error bar, default: Red</param>
            <param name="errorbarLineWidth">[optional] Line width of error bar, default: 1px</param>
            <param name="errorbarWidth">[optional] Width of error bar, default: 0.025</param>
            <param name="markerStyle">[optional] Marker style, default: Dot</param>
            <param name="markerColor">[optional] Marker color, default: Blue</param>
            <param name="lineColor">[optional] Line color, default: Blue</param>
            <param name="lineWidth">[optional] Line width, default: 1px</param>
            <param name="lineStyle">[optional] Line style, default: solid</param>
            <param name="tag">[optional] Identifies the ErrorBarPlot object in the scene graph</param>
            <example><para>Creating an ErrorBarPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
                // Generate Data
                Array<float> XY = linspace<float>(0, 20, 15);
                XY[1,full] = 0.5f * cos(XY[0,full]);
                Array<float> L = tosingle(rand(1, 15));
                Array<float> T = tosingle(rand(1, 15));
                // Create PlotCube object
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // Create ErrorBarPlot object
                var myErrorBarPlot = myPlotCube.Add(new ErrorBarPlot(XY, L, T, visibleLine: false));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="XY"/> is not a matrix.</exception>        
            <exception cref="T:System.ArgumentException">If input argument <paramref name="XY"/> is not a (2 x n) matrix.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Boolean,System.Boolean,System.Nullable{System.Drawing.Color},System.Int32,System.Single,ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Int32,ILNumerics.Drawing.DashStyle,System.Object)">
            <summary>
            Constructor defines ErrorBarPlot on the basis of the matrix <paramref name="XY"/> and the row vectors 
            <paramref name="L"/> and <paramref name="T"/>
            </summary>
            <param name="XY">Matrix that contains x and y coordinates of an arbitrary two dimensional curve.</param>
            <param name="L">Row vector that contains distance between bottom of error bar to vertex of curve.</param>
            <param name="T">[optional] Row vector that contains distance between top of error bar to vertex of curve, default: <paramref name="L"/>.</param>
            <param name="drawVertical">[optional] Draws error bars vertical or horizontal when set to false, default: true</param>
            <param name="visibleLine">[optional] Displays line plot when set to true, default: true</param>
            <param name="errorbarColor">[optional] Line color of error bar, default: Red</param>
            <param name="errorbarLineWidth">[optional] Line width of error bar, default: 1px</param>
            <param name="errorbarWidth">[optional] Width of error bar, default: 0.025</param>
            <param name="markerStyle">[optional] Marker style, default: Dot</param>
            <param name="markerColor">[optional] Marker color, default: Blue</param>
            <param name="lineColor">[optional] Line color, default: Blue</param>
            <param name="lineWidth">[optional] Line width, default: 1px</param>
            <param name="lineStyle">[optional] Line style, default: solid</param>
            <param name="tag">[optional] Identifies the ErrorBarPlot object in the scene graph</param>
            <example><para>Creating an ErrorBarPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
                // Generate Data
                Array<double> XY = linspace<double>(0, 20, 25);
                XY[1,full] = 2 * cos(XY[0,full]);
                Array<double> L = rand(1, 25);
                Array<double> T = rand(1, 25);
                // Create PlotCube object
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // Create ErrorBarPlot object
                var myErrorBarPlot = myPlotCube.Add(new ErrorBarPlot(XY, L, T, errorbarWidth: 0.5f, visibleLine: false));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="XY"/> is not a matrix.</exception>        
            <exception cref="T:System.ArgumentException">If input argument <paramref name="XY"/> is not a (2 x n) matrix.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single})">
            <summary>
            Call this method to update x and y coordinates of an arbitrary two dimensional curve, lower
            and upper distance of error bar to vertex of curve
            </summary>
            <param name="X">Row vector that contains x coordinates of an arbitrary two dimensional curve.</param>
            <param name="Y">Row vector that contains y coordinates of an arbitrary two dimensional curve.</param>
            <param name="L">Row vector that contains distance between bottom of error bar to vertex of curve.</param>
            <param name="T">Row vector that contains distance between top of error bar to vertex of curve.</param>
            /// <example><para>Creating an ErrorBarPlot object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e)
            {
                // Generate Data
                Array<float> XY = linspace<float>(0, 20, 15);
                XY[1,full] = tosingle(rand(1, 15) * 0.5f);
                Array<float> E = 2 + cos(XY[0,full]);
                // Create PlotCube object
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // Create ErrorBarPlot object
                var myErrorBarPlot = myPlotCube.Add(new ErrorBarPlot(XY, E, markerColor: Color.OrangeRed));
                Array<float> L = linspace<float>(0, 2, 15);
                myErrorBarPlot.Update(L: L);
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="X"/> is not a row vector.</exception>        
            <exception cref="T:System.ArgumentException">If input argument <paramref name="Y"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="L"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="T"/> is not a row vector.</exception>
            <exception cref="T:System.ArgumentException">If input arguments <paramref name="X"/>,
            <paramref name="Y"/>, <paramref name="L"/> and <paramref name="T"/> do not have matching dimensions.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="L"/> is negative.</exception>
            /// <exception cref="T:System.ArgumentException">If input argument <paramref name="T"/> is negative.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ErrorBarPlot.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.FastSurface">
            <summary>
            A simple, yet rich surface object, focussing on performance of rendering and updates.
            </summary>
            <remarks>The <see cref="T:ILNumerics.Drawing.Plotting.FastSurface"/> plot object offers a performant way of displaying 3 or 4 dimensional 
            data on a 2 or 3 dimensional grid, involving the height (Z) coordinates and / or the colors of the grid tiles. Efficient
            updates to the data (including the shape, individual coordinates and/or individual colors) are possible.
            <para>In difference to <see cref="T:ILNumerics.Drawing.Plotting.Surface"/>, <see cref="T:ILNumerics.Drawing.Plotting.FastSurface"/> is not able to handle transparency and does not maintain a wireframe.</para>
            <para><see cref="T:ILNumerics.Drawing.Plotting.FastSurface"/> objects are created empty and afterwards configured solely by the <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/> method.</para>
            </remarks>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FastSurface.DefaultFillTag">
            <summary>
            Default tag used for to identify the surface fil triangle shape in the scene: "FastSurfaceFill".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FastSurface.DefaultTag">
            <summary>
            Default tag used to identidy the fast surface object in the scene: "FastSurface".
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.numberGridPoints">
            <summary>
            Indicates number of grid points used for downscaling.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.downscalingRecommended">
            <summary>
            [Experimental Phase] Displays whether downscaling is recommended or not [readonly].
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.OriginalRows">
            <summary>
            Number of original rows [readonly].
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.OriginalColumns">
            <summary>
            Number of original columns [readonly].
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.Rows">
            <summary>
            Number of rows configured [readonly].
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.Columns">
            <summary>
            Number of columns configured [readonly].
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.Fill">
            <summary>
            Gives a reference to the triangle strip shape of the surface fill (readonly, the shape itself is mutable).
            </summary>
            <remarks><para>The <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Fill"/> property allows direct access to the triangles shape realizing the filled 
            area of the surface. It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, like the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.FastSurface"/> modify the internal data and the internal triangle strip 
            shape. Therefore and since <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Fill"/> gives direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Fill"/>, caused by manual changed and by changes due to the <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/>"/> 
            function.</para>
            </remarks>
            <example><para>Create a simple fast surface and enable lighting on the fill.</para>
            <code></code>
            </example>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.MinMaxColorRange">
            <summary>
            Color value range used for mapping values to colors via the colormap [readonly].
            </summary>
            <remarks>Use the Update() function in order to manipulate this surface object.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.Colormap">
            <summary>
            Gets the current colormap [readonly].
            </summary>         
            <remarks><para>This parameter is readonly. Use <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/></para>
            in order to change the colormap of the surface plot.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.IsColormapped">
            <summary>
            Determine whether computations of colors are based on a colormap. Always returns true for <see cref="T:ILNumerics.Drawing.Plotting.FastSurface"/>.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.GetRangeMinValue(ILNumerics.Drawing.AxisNames)">
            <summary>
            Gets the lower value limit corresponding to the lower bound of the colormap [readonly].
            </summary>
            <param name="AxisName">[Ignored]</param>
            <returns>The scalar value of the lower limit of the colormap.</returns>
            <remarks><para>This parameter is readonly. Use <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/></para>
            in order to control the behavior of the colormap for the surface plot.</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.GetRangeMaxValue(ILNumerics.Drawing.AxisNames)">
            <summary>
            Gets the upper value limit corresponding to the upper bound of the colormap [readonly].
            </summary>
            <param name="AxisName">[Ignored]</param>
            <returns>The scalar value of the upper limit of the colormap.</returns>
            <remarks><para>This parameter is readonly. Use <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/></para>
            in order to control the behavior of the colormap for the surface plot.</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.ScaleMode(ILNumerics.Drawing.AxisNames)">
            <summary>
            Gets the scale mode for the colorbar axis. This is always 'Linear'. 
            </summary>
            <param name="AxisName">[ignored]</param>
            <returns>AxisScale.Linear</returns>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FastSurface.ParameterHasChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.#ctor(System.Object)">
            <summary>
            Fast surface constructor, creates an empty surface. Use <see cref="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)"/> on the created object for configuration!
            </summary>
            <param name="tag">[Optional] Tag used to identify the object in the scene. Default: <see cref="F:ILNumerics.Drawing.Plotting.FastSurface.DefaultTag"/>('FastSurface').</param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3},System.Boolean)">
            <summary>
            Configure/ change/ update the surface data. 
            </summary>
            <param name="X">[Optional] X coordinates. Grid vector or meshgrid result. Default (null): do not change.</param>
            <param name="Y">[Optional] Y coordinates. Grid vector or meshgrid result. Default (null): do not change.</param>
            <param name="Z">[Optional] Matrix of new Z values. Default (null): do not change.</param>
            <param name="C">[Optional] Matrix with new color data for mapping with <paramref name="colormap"/>. Default (null): do not change.</param>
            <param name="colormap">[Optional] Colormap used to map C or Z values to rendering colors. Default (null): <see cref="F:ILNumerics.Drawing.Colormaps.ILNumerics"/>.</param>
            <param name="minLimit">[Optional] Minimum point of the new bounding box. Default (null): compute from given arguments.</param>
            <param name="maxLimit">[Optional] Maximum point of the new bounding box. Default (null): compute from given arguments.</param>
            <param name="minmaxColorRange">[Optional] Range of values for deriving the colors from the colormap. Default (null): min / max value from <paramref name="Z"/> / <paramref name="C"/>.</param>
            <param name="performDownscaling">[Optional] [Experimental phase] Set this parameter to true and too large data will be downscaled according to the current view. Default: false</param>
            <remarks>
            <para>All parameters are optional.</para>
            <para>The grid size and position is determined by (in this order): Z, X, Y or C parameters. If none of these parameters are given, the existing grid of the surface will not change.
            If any of Z, X, Y, and/or C are provided, they must all have the same size. Alternatively, either one of them can be a scalar. The scalar value will be used for all grid points in this case.</para>
            <para>Either of <paramref name="Z"/>, <paramref name="X"/>, <paramref name="Y"/> or <paramref name="C"/> must be given at least once in order to specify the intial shape of the surface. 
            The minimal grid size of a surface is 2 x 2, hence the matrices provided must have not less than 2 elements in columns and rows.</para>
            <para>The size of the grid can be redefined at any time by providing different <paramref name="Z"/>, <paramref name="X"/>, <paramref name="Y"/> or <paramref name="C"/> parameters.</para>
            <para><paramref name="X"/> and <paramref name="Y"/> can be grid vectors with the coordinates in the corresponding dimension of the grid points. 
            Alternatively, they can be the output of <see cref="M:ILNumerics.Core.Functions.Builtin.MathInternal.meshgrid(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.OutArray{System.Double})"/>, i.e.: the X and Y 
            coordinates of <strong>all</strong> grid points. In this case, the given array must match the shape of <paramref name="Z"/> and/or <paramref name="C"/> respectively.</para>
            <para>As a special case, either of the size defining parameters <paramref name="Z"/>, <paramref name="X"/>, <paramref name="Y"/> or <paramref name="C"/> can be a scalar. Its value is then used for all grid points. In this case, 
            the size of the grid must have been specified already (by a former call to Update()) or must be defined by other, non-scalar parameters.</para>
            <para>Surfaces require at least 2 rows and 2 columns.</para>
            <para>Changing the grid size will set any non-specified parameter to its default values.</para>
            <para>The <paramref name="minLimit"/> and <paramref name="maxLimit"/> properties can optionally be used to save the computational efforts of determining the new 
            bounding box limits after the update was completed. If the nature of the new data is sufficiently known, providing these limits will further speed up the refreshing of the surface.</para>
            <para>Calling this method potentially triggers PropertyChanged events on the following properties: <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Rows"/>, <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Columns"/>, <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.MinMaxColorRange"/>, 
            <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Colormap"/>, <see cref="P:ILNumerics.Drawing.Plotting.FastSurface.Fill"/>.</para>
            <para> Auto Downscaling: This option is still in the experimental phase. Only by setting the input parameter <paramref name="performDownscaling"/> to true, this option is selected. The default value
            is set to false, this way the original version of FastSurface() is applied.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"> if the shape of any positional parameter provided or C is invalid / not consistent with other parameters. Inspect exception message for details.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers.  
            </summary>
            <returns>Deep copy of this object</returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.BeginVisit(ILNumerics.Drawing.RenderParameter)">
            <summary>
            Method that is called in the beginning of the rendering process to interpolate the input parameter Z and the corresponding arrays X and Y according to the current view. 
            </summary>
            <param name="parameter"> contains renderer parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.getLimitsInternal(System.Collections.Generic.Stack{ILNumerics.Drawing.Matrix4},ILNumerics.Drawing.Limits,System.Boolean,System.Nullable{ILNumerics.Drawing.Vector3})">
            <summary>
            Computes new limits for FastSurface, if auto downscaling is enabled.
            </summary>
            <param name="transforms">matrix stack that contains transformation matrixes.</param>
            <param name="ret">contains limits of FastSurface.</param>
            <param name="ignoreRootTransform"></param>
            <param name="lowerBound"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.EndVisit(ILNumerics.Drawing.RenderParameter)">
            <summary>
            Method that is called at the end of the rendering process to get the duration of the rendering process.
            </summary>
            <param name="parameter"> contains renderer parameters.</param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.DetermineVisibleRange(ILNumerics.InArray{System.Int32},ILNumerics.OutArray{System.Single})">
            <summary>
            Determines visible range to conduct a more precise interpolation.
            </summary>
            <param name="index">contains indices of visible vertices.</param>
            <param name="maxXYValues">returns the maximum X and Y values of visible vertices.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.ComputeSizeGridPoints(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Int32},ILNumerics.InArray{System.Single})">
            <summary>
            Determines true size of area that array occupies.
            </summary>
            <param name="V">Vertices.</param>
            <param name="indexColumn"></param>
            <param name="plotCubeSize"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.PerformDownscaling(ILNumerics.InArray{System.Single},System.Int32,System.Single,System.Single,System.Single,System.Single,ILNumerics.OutArray{System.Single},ILNumerics.OutArray{System.Single},ILNumerics.OutArray{System.Single})">
            <summary>
            Performs downscaling on the basis of the input array Z, its size and start values.
            </summary>
            <param name="Z"> array that contains Z values.</param>
            <param name="totalGridPoints">Total amount of grid points.</param>
            <param name="xStartValue"></param>
            <param name="yStartValue"></param>
            <param name="xEndValue"></param>
            <param name="yEndValue"></param>
            <param name="outInterpolatedX">Array that contains interpolated X values.</param>
            <param name="outInterpolatedY">Array that contains interpolated Y values.</param>
            <param name="outInterpolatedC">Array that contains interpolated C values.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.UpdateInternal(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.Drawing.Plotting.Colormap,System.Tuple{System.Single,System.Single},System.Nullable{ILNumerics.Drawing.Vector3},System.Nullable{ILNumerics.Drawing.Vector3})">
            <summary>
            Nucleus of FastSurface: Contains the original function.
            </summary>
            <param name="X">Array that contains x values.</param>
            <param name="Y">Array that contains y values.</param>
            <param name="Z">Array that contains z values.</param>
            <param name="C">Array that contains c values.</param>
            <param name="colormap"></param>
            <param name="minmaxColorRange"></param>
            <param name="minLimit"></param>
            <param name="maxLimit"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FastSurface.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.FillArea">
            <summary>
            A class used to create and fill an area below or above an arbitrary two dimensional curve. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FillArea.DefaultTag">
            <summary>
            Default tag used to identify the FillArea object in the scene: "FillArea".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FillArea.FillTag">
            <summary>
            Default tag used to identify the fill area in the scene: "Fill".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FillArea.BorderTag">
            <summary>
            Default tag used to identify the border in the scene: "Border"
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.FillArea.NextColors">
            <summary>
            Color enumerator used to color subsequent lines 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FillArea.Border">
            <summary>
            Provides a reference to the border of FillArea. 
            </summary>
            <remarks><para>The <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Border"/> property allows direct access to the line, partly defining the fill area of FillArea.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, like the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property and all mouse event.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.FillArea"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Border"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Border"/>, caused by manual changed and by changes due to the <see cref="M:ILNumerics.Drawing.Plotting.FillArea.Update(ILNumerics.InArray{System.Single},System.Nullable{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.FillArea.Fill">
            <summary>
            Provides a reference to the fill area of FillArea. 
            </summary>
            <remarks><para>The <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Fill"/> property allows direct access to the triangles shape representing the filled area of the surface. 
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, like the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.FillArea"/> modify internal data and therefore also the internal triangle strip 
            shape. Since <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Fill"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.FillArea.Fill"/>, caused by manual changed and by changes due to the <see cref="M:ILNumerics.Drawing.Plotting.FillArea.Update(ILNumerics.InArray{System.Single},System.Nullable{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor(ILNumerics.Drawing.Plotting.FillArea)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor(ILNumerics.InArray{System.Single},System.Single,System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Object)">
            <summary>
            Constructor defines FillArea on the basis of a <paramref name="positions"/> array
            </summary>
            <param name="positions">(2 x n) matrix, containing coordinates of arbitrary two dimensional curve</param>
            <param name="baseline">[optional] line that defines upper or lower limit of fill area depending on its value, default: 0</param>
            <param name="lineWidth">[optional] line width, default: 1px</param>
            <param name="lineColor">[optional] line color, default: auto</param>
            <param name="fillColor">[optional] fill color, default: auto</param>
            <param name="tag">[optional] identifying the FillArea object in the scene graph</param>
            <example><para>Creation of an FillArea object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // create data
                Array<float> positions = tosingle(linspace(0, 2 * pi, 100));
                positions[1,full] = sin(positions[0,full]);
                // create plot cube
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // create an FillArea object
                var myFillArea = myPlotCube.Add(new FillArea(positions, baseline: -1, lineWidth: 2,lineColor: Color.DarkGreen, fillColor: Color.SeaGreen));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="positions"/> is not a (2 x n) array.</exception>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="positions"/> has more than two dimensions.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor(ILNumerics.InArray{System.Double},System.Single,System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Object)">
            <summary>
            Constructor defines FillArea on the basis of a <paramref name="positions"/> array
            </summary>
            <param name="positions">(2 x n) matrix, containing coordinates of arbitrary two dimensional curve</param>
            <param name="baseline">[optional] line that defines upper or lower limit of fill area depending on its value, default: 0</param>
            <param name="lineWidth">[optional] line width, default: 1px</param>
            <param name="lineColor">[optional] line color, default: auto</param>
            <param name="fillColor">[optional] fill color, default: auto</param>
            <param name="tag">[optional] identifying the FillArea object in the scene graph</param>
            <example><para>Creation of an FillArea object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // create data
                Array<double> positions = linspace(0, 2 * pi, 100);
                positions[1,full] = sin(positions[0,full]);
                // create plot cube
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // create an FillArea object
                var myFillArea = myPlotCube.Add(new FillArea(positions, baseline: -1, lineWidth: 2,lineColor: Color.DarkGreen, fillColor: Color.SeaGreen));
            } 
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="positions"/> is not a (2 x n) array.</exception>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="positions"/> has more than two dimensions.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Single,System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Object)">
            <summary>
            Constructor defines FillArea using the one dimensional arrays <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <param name="x">(1 x n) matrix, containing x coordinates of arbitrary two dimensional curve</param>
            <param name="y">(1 x n) matrix, containing y coordinates of arbitrary two dimensional curve</param>
            <param name="baseline">[optional] line that defines upper or lower limit of fill area depending on its value, default: 0</param>
            <param name="lineWidth">[optional] line width, default: 1px</param>
            <param name="lineColor">[optional] line color, default: auto</param>
            <param name="fillColor">[optional] fill color, default: auto</param>
            <param name="tag">[optional] identifying the FillArea object in the scene graph</param>
            /// <example><para>Creation of an FillArea object</para>
            /// <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // create data
                Array<float> x = tosingle(linspace(0, 3 * pi, 100));
                Array<float> y = sin(x[0,full]);
                // create plot cube
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // create an FillArea object
                var myFillArea = myPlotCube.Add(new FillArea(x, y, baseline: -1, lineWidth: 2,lineColor: Color.DarkGreen, fillColor: Color.SeaGreen));
            }
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="x"/> is not a (1 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="y"/> is not a (1 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input arguments <paramref name="x"/> and <paramref name="y"/> do not have the same size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Single,System.Int32,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Object)">
            <summary>
            Constructor defines FillArea using the one dimensional arrays <paramref name="x"/> and <paramref name="y"/>.
            </summary>
            <param name="x">(1 x n) matrix, containing x coordinates of arbitrary two dimensional curve</param>
            <param name="y">(1 x n) matrix, containing y coordinates of arbitrary two dimensional curve</param>
            <param name="baseline">[optional] line that defines upper or lower limit of fill area depending on its value, default: 0</param>
            <param name="lineWidth">[optional] line width, default: 1px</param>
            <param name="lineColor">[optional] line color, default: auto</param>
            <param name="fillColor">[optional] fill color, default: auto</param>
            <param name="tag">[optional] identifying the FillArea object in the scene graph</param>
            /// <example><para>Creation of an FillArea object</para>
            /// <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // create data
                Array<double> x = linspace(0, 3 * pi, 100);
                Array<double> y = sin(x[0,full]);
                // create plot cube
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // create an FillArea object
                var myFillArea = myPlotCube.Add(new FillArea(x, y, baseline: -1, lineWidth: 2,lineColor: Color.DarkGreen, fillColor: Color.SeaGreen));
            }
            
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="x"/> is not a (1 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input argument <paramref name="y"/> is not a (1 x n) array.</exception>
            <exception cref="T:System.ArgumentException">If input arguments <paramref name="x"/> and <paramref name="y"/> do not have the same size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.Update(ILNumerics.InArray{System.Single},System.Nullable{System.Single})">
            <summary>
            Call this method to update the positions and the baseline of a recently created FillArea object
            </summary>
            <param name="positions">[optional] (2 x n) matrix, containing new positions.</param>
            <param name="baseline">[optional] line that defines upper or lower limit of fill area depending on its value, default: 0.</param>
            <example><para>Creation of an FillArea object</para>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
                // create data
                Array<float> positions = tosingle(linspace(0, 2 * pi, 100));
                positions[1,full] = sin(positions[0,full]);
                // create plot cube
                var myPlotCube = ilPanel1.Scene.Add(new PlotCube());
                // create an FillArea object
                var myFillArea = myPlotCube.Add(new FillArea(positions));
                // modify data
                positions = -2 + positions;
                // modify exisiting FillArea object
                myFillArea.Update(positions, -1);
                myFillArea.Fill.Color = Color.SeaGreen;
                myFillArea.Border.Color = Color.DarkGreen;
                myFillArea.Border.Width = 2;
            } 
            ]]></code>
            </example>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="positions"/> is not a (2 x n) array.</exception>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="positions"/> has more than two dimensions.</exception>
            <exception cref="T:System.ArgumentException"> If input argument <paramref name="baseline"/> has the wrong size.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy of FillArea.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.FillArea.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.ShapefileReader">
            <summary>
            A class used to read shapefiles and create a cell array on the basis of the coordinates and indices of the records included. 
            </summary>   
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.ShapefileReader.shapeType">
            <summary>
            Contains the shape type.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.ShapefileReader.numberOfRecords">
            <summary>
            Contains the number of records.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.ShapefileReader.geometryData">
            <summary>
            Contains the coordinates of the shapefile.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ShapefileReader.#ctor(System.String,System.String)">
            <summary>
            Use constructor to read data from a shapefile and write the data to a cell. 
            </summary>
            <param name="pathMainFile">is a string that contains the absolute or relative path to the main file (.shp) of a shapefile.</param>
            <param name="pathIndexFile">is a string that contains the absolute or relative path to the index file (.shx) of a shapefile.</param> 
            <remarks><para> This class produces a cell that contains the coordinates and indices for each record of the shapefile.</para> 
            <para> Currently, it is only possible to read shapefiles that contain the shape type polygon. It is very important to make sure 
            that the main and index file belong to the same shapefile. This is usually indicated by the same file name. Otherwise contents might
            not match and will produce an exception.</para></remarks>        
            <exception cref="T:System.ArgumentException">If the input parameter <see cref="!:pathMainFile"/> does not lead to a .shp file.</exception> 
            <exception cref="T:System.ArgumentException">If the input parameter <see cref="!:pathIndexFile"/> does not lead to a .shx file.</exception>
            <exception cref="T:System.ArgumentException">If the provided shapefile does not contain the shape type polygon.</exception>
            <exception cref="T:System.ArgumentException">If the provided shapefile is empty.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.ShapefileReader.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Use constructor to read data from a shapefile and write the data to a cell. 
            </summary>
            <param name="mainFile">is a byte array that contains the geometry data of a Shapefile.</param>
            <param name="indexFile">is a byte array that contains the offset and length of each record of the main file.</param>
            <exception cref="T:System.ArgumentException">If the provided shapefile does not contain the shape type polygon.</exception>
            <exception cref="T:System.ArgumentException">If the provided shapefile is empty.</exception>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.SmoothSurface">
            <summary>
            <para>This class creates a smoothed surface out of scattered data points. It allows to control the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/>, the surface 
            <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Margin"/> (extrapolation area around the given points) and the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/>. </para>
            <para>Out of the provided scattered data points <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> computes a regular grid via kriging interpolation. In a 
            postprocessing step the grid is smoothed by efficient low-pass filtering (via fast fourier transform).</para>
            <para><see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> can be used like a regular ILNumerics visualization object, directly as a child of Scene.Camera. Or, one may 
            add it to a plot cube to get labeling and all common interactive options.</para>
            <para><see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> is composed out of a regular <see cref="T:ILNumerics.Drawing.Plotting.Surface"/> and an <see cref="T:ILNumerics.Drawing.Points"/> 
            shape. The <see cref="T:ILNumerics.Drawing.Plotting.Surface"/> displays the smoothed grid and the <see cref="T:ILNumerics.Drawing.Points"/> display the 
            scattered data points. Both objects are accessible by the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Surface"/> and <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.PointsOriginal"/> properties, respectively. They can be 
            configured in arbitrary ways, including changing the colormap for the surface, the colors and size of the points, configuring the wireframe, enabling / disabling and 
            configuring light effects.</para>
            <para>Kriging interpolation comes with a memory requirement of O(N²). This means, if your input data (point cloud) has n points it will internaly try to 
            create a matrix of n x n single precision floating point values. Make sure to target x64 and/or to limit the number of data points accordingly to allow this memory even for large data.</para>
            <para>Another aspect of kriging is its global interpolation method: all data points are considered for each new interpolated value. So, the original points 
            should be 'well suited'. This class together with the Kriging interpolators will perform multiple checks on the data and attempt to remove any disturbing artefacts. But you can help by making 
            sure to provide 'clean' data: don't provide data points laying too close to each other and remove any outliers! </para>
            <para>Kriging interpolation is described in more detail here: <see href="https://ilnumerics.net/kriging-interpolation-net.html"/>. Note, that this class depends on the ILNumerics.Toolboxes.Interpolation module. (But a license is required for the Drawing2 toolbox only.)</para>
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.DrawPoints">
            <summary>
            Whether or not the original points are to be drawn over the interpolated surface. 
            </summary>
            <remarks>This controls the Visible property on the Points shape used for rendering the original points.</remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.Margin">
            <summary>
            Size (width, height) of the surface edge outside the specified data points. Exrapolation is performed here. Default: 0.1, 0.1
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution">
            <summary>
            Number of interpolated points along X and Y. Default: 150 x 150. 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor">
            <summary>
            Determins the degree of smoothing applied to the resulting surface. Number of neighboring grid samples to be included into the computation of a final data point. Default: 0 (no smoothing). 
            </summary>
            <remarks><para>The value for <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> must be positive and in range [0... Min(m_resolution.Width, m_resolution.Height)]. If 
            the provided new value is outside of that range it is automatically adjusted to fit into the allowed range and a message is written into the <see cref="T:System.Diagnostics.Trace"/> log.</para>
            <para>In a setup where the surface is dynamically updates with new values for <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> one may notices a slight 'jump' of the interpolated 
            surface along the XY diagonal by an offset of ~1 grid element. This effect is caused by the moving average filter. It depends on the current value of <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/>. 
            The filter is symmetric only for even values of <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/>. Uneven values cause a slight shift of the interpolated region. This effect can be avoided by 
            providing even values to the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> property only. This corresponding example demonstrates this method: <see href="https://ilnumerics.net/examples.php?exid=7dfe14e2a25d77702302f0097b3d219f"/>.</para>
            </remarks>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.Surface">
            <summary>
             Gives access to the Surface plot object used for displaying the interpolated result. 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SmoothSurface.PointsOriginal">
            <summary>
            Access to the Points shape used for displaying the original data points, if <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.DrawPoints"/> is true. 
            </summary>
            <remarks><para>The underlying points shape stores the original, scattered points used for interpolation.</para>
            <para>Access to this shape must be limited to the configuration of visual properties! Do not change the Positions of the points! This would bring the <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/>
            into inconsistent state! In order to change the orinial points a new <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> must be created.</para></remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SmoothSurface.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Boolean,System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.UInt32)">
            <summary>
            Creates a new <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> plot. 
            </summary>
            <param name="XYPoints">Matrix with 2 rows. Each colum stores the X and Y coordinates of a single data point at arbitrary position.</param>
            <param name="Z">Z values for all points given in <paramref name="XYPoints"/>. Vector of length <paramref name="XYPoints"/>.S[1].</param>
            <param name="drawPoints">[Optional] Whether to mark the original point in the surface. True: show points. Default: true.</param>
            <param name="margin">[Optional] Specify the fraction of the overall width / height the resulting surface is extended (by extrapolation) 
            to reach over the minimum / maximum specified points. Default: 0.1 of the specified width / heigth. </param>
            <param name="resolution">[Optional] Number of new data points for the interpolation grid. Default: 150 x 150 points.</param>
            <param name="smoothingFactor">[Optional] Averaging factor. Number of neighboring samples to consider when applying an moving average 
            filter in the post processing. Default: 0 (no smoothing).</param>
            <remarks><para>A value of 0.5 for 'Margin.Width' means: <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"></see> adds half of the actual width (as specified by <paramref name="XYPoints"/> 
            to the left and the right end of the surface width and computes values for this area by extrapolation. Default value is 0.1. The same scheme 
            applies for <see name="Margin"/>.Height correspondingly.</para>
            <para>If you want the resulting interpolated data to look <b>smoother</b> by decreasing, let's say: peaks coming from measurement errors, 
            there are two options to achieve this: 
            <list type="bullet">
            <item>Use fewer interpolated data points. Decrease <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> to compute fewer points in both directions (width / height).</item>
            <item>Use the <paramref name="smoothingFactor"/> argument, specifying a higher value. The default value '0' performs no smoothing. 
            Higher values result in more smooth surfaces.</item>
            </list>
            Note, that both control options depend on each other! In order to find an optimal setting it is recommended to ...
            </para>
            <para>1) determine a <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> which leads to a grid resolution with small enough tiles. In a setup with too small resolution 
            tiles can become too large so that the surface looks 'edgy'. Increase the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> parameter (here or later on the created object) 
            until the tiles have a appropriate size. </para>    
            <para>2) Now find a good <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> for the selected resolution. Larger resolution surfaces require a higher value for <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> 
            in order to achieve the same smoothness of the result.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SmoothSurface.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Boolean,System.Nullable{System.Drawing.SizeF},System.Nullable{System.Drawing.Size},System.UInt32)">
            <summary>
            Creates a new <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"/> plot. 
            </summary>
            <param name="XYPoints">Matrix with 2 rows. Each colum stores the X and Y coordinates of a single data point at arbitrary position.</param>
            <param name="Z">Z values for all points given in <paramref name="XYPoints"/>. Vector of length <paramref name="XYPoints"/>.S[1].</param>
            <param name="drawPoints">[Optional] Whether to mark the original point in the surface. True: show points. Default: true.</param>
            <param name="margin">[Optional] Specify the fraction of the overall width / height the resulting surface is extended (by extrapolation) 
            to reach over the minimum / maximum specified points. Default: 0.1 of the specified width / heigth. </param>
            <param name="resolution">[Optional] Number of new data points for the interpolation grid. Default: 150 x 150 points.</param>
            <param name="smoothingFactor">[Optional] Averaging factor. Number of neighboring samples to consider when applying an moving average 
            filter in the post processing. Default: 0 (no smoothing).</param>
            <remarks><para>A value of 0.5 for 'Margin.Width' means: <see cref="T:ILNumerics.Drawing.Plotting.SmoothSurface"></see> adds half of the actual width (as specified by <paramref name="XYPoints"/> 
            to the left and the right end of the surface width and computes values for this area by extrapolation. Default value is 0.1. The same scheme 
            applies for <see name="Margin"/>.Height correspondingly.</para>
            <para>If you want the resulting interpolated data to look <b>smoother</b> by decreasing, let's say: peaks coming from measurement errors, 
            there are two options to achieve this: 
            <list type="bullet">
            <item>Use fewer interpolated data points. Decrease <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> to compute fewer points in both directions (width / height).</item>
            <item>Use the <paramref name="smoothingFactor"/> argument, specifying a higher value. The default value '0' performs no smoothing. 
            Higher values result in more smooth surfaces.</item>
            </list>
            Note, that both control options depend on each other! In order to find an optimal setting it is recommended to ...
            </para>
            <para>1) determine a <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> which leads to a grid resolution with small enough tiles. In a setup with too small resolution 
            tiles can become too large so that the surface looks 'edgy'. Increase the <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.Resolution"/> parameter (here or later on the created object) 
            until the tiles have a appropriate size. </para>    
            <para>2) Now find a good <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> for the selected resolution. Larger resolution surfaces require a higher value for <see cref="P:ILNumerics.Drawing.Plotting.SmoothSurface.SmoothingFactor"/> 
            in order to achieve the same smoothness of the result.</para>
            </remarks>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.SplinePlot">
            <summary>
            A class used to visualize 1-,2- and 3 dimensional data as not-a-knot spline interpolated plots with markers(original points)
            </summary>    
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.SplinePlot.SplinePlotTag">
            <summary>
            Default tag that identifies the spline plot in the scene.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.SplinePlot.SmoothLineTag">
            <summary>
            Default tag that identifies the smooth line of spline plot in the scene.
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SplinePlot.Resolution">
             <summary>
             Get or sets the resolution of SplinePlot 
             </summary>
             <remarks>
             <para>Resolution indicates the number of additional query points that are created between two original points.
             If the resolution is null, it will be calculated automatically. However, this optional parameter is only 
             available for 1D and 2D data.</para>        
             <para>Exception handling please see <see cref="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor"/> constructor.</para> 
             </remarks>
             <example><para>Creates and plots a smooth SplinePlot through 10 random data points. Use this example in a Windows Forms Application project.</para>        
             <para>Setting up the new resolution value updates recently created SplinePlot</para>
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<float> Points = tosingle(rand(3, 10));         
            
                // setup the plot cube ...
                 var pc = ilPanel1.Scene.Add(new PlotCube(twoDMode: false));
                 
                // plot smooth Spline plot with resolution 2
                 var mySplinePlot = pc.Add(new SplinePlot(Points, lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:2));
                 
                 // change spline resolution
                 mySplinePlot.Resolution = 4;
                
            }
            ]]></code>
            </example> 
            <exception cref="T:System.ArgumentException">If resolution value is less or equals 0.</exception>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.SplinePlot.SmoothLine">
            <summary>
            Provides a reference to the smooth line of SplinePlot. 
            </summary>
            <remarks><para>The <see cref="P:ILNumerics.Drawing.Plotting.SplinePlot.SmoothLine"/> property allows direct access to the line that indicates the smooth line of SplinePlot.
            It allows all configurations valid for general shapes, including the access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property and all mouse events.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.SplinePlot"/> modify internal data and therefore also the internal line strip shape. 
            Since <see cref="P:ILNumerics.Drawing.Plotting.SplinePlot.SmoothLine"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.SplinePlot.SmoothLine"/>, caused by manual changed and by changes due to the 
            <see cref="M:ILNumerics.Drawing.Plotting.SplinePlot.Update(ILNumerics.InArray{System.Single})"/> function.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.Drawing.Plotting.SplinePlot)">
            <summary>
            Copy constructor. 
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.InArray{System.Single},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Int32},System.Boolean)">
             <summary>
             Constructor defines SplinePlot on the basis of a <paramref name="positions"/> array.
             </summary>
             <param name="positions">[1 x n], [2 x n] or [3 x n] matrix.</param>
             <param name="tag">[optional] Tag that identifies the spline plot in the scene.</param>
             <param name="lineColor">[optional] Line color, default: auto.</param>
             <param name="lineStyle">[optional] Line style, default: solid.</param>
             <param name="lineWidth">[optional] Line width, default: 1px.</param>
             <param name="markerColor">[optional] Marker color, default: auto.</param>
             <param name="markerStyle">[optional] Marker style, default: none.</param>
             <param name="resolution">[optional] Resolution indicates the number of additional query points that are created, default: 1.</param>
             <param name="useSplinePathFor1D">[optional] Specifies the spline calculation method for one dimensional <paramref name="positions"/> arrays, default: true. If true,
             the calculation is performed on the basis of splinepath(), otherwise, spline(). Default: true.</param>
             <remarks>
             <para> Query points are the points between two key points. If the <paramref name="resolution"/> is set to null, it will be calculated automatically based on
             the current panel size and number of visible points.</para>   
             <para> If <paramref name="useSplinePathFor1D"/> is true, the spline calculation for one dimensional <paramref name="positions"/> arrays is performed on the basis
             of splinepath(), otherwise spline().</para>
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 10 random data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<float> Points = tosingle(rand(3, 10));         
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // plot original function points
                     new LinePlot(Points, lineColor:Color.Blue, markerStyle: MarkerStyle.Dot),
                     // plot smooth Spline plot
                     new SplinePlot(Points, lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:4)
                });
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input argument <paramref name="positions"/> have wrong size or shape, or item is not provided.</exception>
             <exception cref="T:System.ArgumentException">If resolution value is less or equals 0.</exception>
             <exception cref="T:System.ArgumentException">If Dimension is larger than 2 and no resolution is specified.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Int32})">
             <summary>
             Constructor defines SplinePlot on the basis of the vectors <paramref name="X"/> and <paramref name="Y"/>.
             </summary>
             <param name="X"> Vector that contains X values.</param>
             <param name="Y"> Vector that contains Y values.</param>
             <param name="tag">[optional] Tag that identifies the spline plot in the scene.</param>
             <param name="lineColor">[optional] Line color, default: auto.</param>
             <param name="lineStyle">[optional] Line style, default: solid.</param>
             <param name="lineWidth">[optional] Line width, default: 1px.</param>
             <param name="markerColor">[optional] Marker color, default: auto.</param>
             <param name="markerStyle">[optional] Marker style, default: none.</param>
             <param name="resolution">[optional] Resolution indicates a factor of the number of additional query 
             points that are created, default: 1.</param>       
             <remarks>
             <para> Query points are the points between two key points. If the <paramref name="resolution"/> is set to null, it will be calculated automatically based on
             the current panel size and number of visible points.</para>   
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 10 random data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<float> Points = tosingle(rand(3, 10));         
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // plot original function points
                     new LinePlot(Points, lineColor:Color.Blue, markerStyle: MarkerStyle.Dot),
                     // plot smooth Spline plot
                     new SplinePlot(X:Points[0,full], Y:Points[1,full], Z:Points[2,full], lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:4)
                });
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input arguments <paramref name="X"/> or <paramref name="Y"/> have different sizes, or one of them is not provided.</exception>
             <exception cref="T:System.ArgumentException">If resolution value is less or equals 0.</exception>
             <exception cref="T:System.ArgumentException">If Dimension is larger than 2 and no resolution is specified.</exception>        
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Int32})">
             <summary>
             Constructor defines SplinePlot on the basis of the vectors <paramref name="X"/> and <paramref name="Y"/>.
             </summary>
             <param name="X"> Vector that contains X values.</param>
             <param name="Y"> Vector that contains Y values.</param>
             <param name="tag">[optional] Tag that identifies the spline plot in the scene.</param>
             <param name="lineColor">[optional] Line color, default: auto.</param>
             <param name="lineStyle">[optional] Line style, default: solid.</param>
             <param name="lineWidth">[optional] Line width, default: 1px.</param>
             <param name="markerColor">[optional] Marker color, default: auto.</param>
             <param name="markerStyle">[optional] Marker style, default: none.</param>
             <param name="resolution">[optional] Resolution indicates a factor of the number of additional query points that 
             are created, default: 1.</param>       
             <remarks>
             <para> Query points are the points between two key points. If the <paramref name="resolution"/> is set to null, it will be calculated automatically based on
             the current panel size and number of visible points.</para>   
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 10 defined data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 2D space
                Array<double> X = linspace<double>(-pi, pi, 10); 
                Array<double> Y = sin(X);
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // plot original function points
                     new LinePlot(X, Y, lineColor:Color.Blue, markerStyle: MarkerStyle.Dot),
                     // plot smooth Spline plot
                     new SplinePlot(X, Y, lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:4)
                });
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input arguments <paramref name="X"/> or <paramref name="Y"/> have different sizes, or one of them is not provided.</exception>
             <exception cref="T:System.ArgumentException">If resolution value is less or equals 0.</exception>
             <exception cref="T:System.ArgumentException">If Dimension is larger than 2 and no resolution is specified.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Int32})">
             <summary>
             Constructor defines SplinePlot on the basis of the vectors <paramref name="X"/> and <paramref name="Y"/>.
             </summary>
             <param name="X"> Vector that contains X values.</param>
             <param name="Y"> Vector that contains Y values.</param>
             <param name="Z"> Vector that contains Z values.</param>
             <param name="tag">[optional] Tag that identifies the spline plot in the scene.</param>
             <param name="lineColor">[optional] Line color, default: auto.</param>
             <param name="lineStyle">[optional] Line style, default: solid.</param>
             <param name="lineWidth">[optional] Line width, default: 1px.</param>
             <param name="markerColor">[optional] Marker color, default: auto.</param>
             <param name="markerStyle">[optional] Marker style, default: none.</param>
             <param name="resolution">[optional] Resolution indicates a factor of the number of additional query points 
             that are created, default: 1.</param>       
             <remarks>
             <para> Query points are the points between two key points. If the <paramref name="resolution"/> is set to null, it will be calculated automatically based on
             the current panel size and number of visible points.</para>   
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 10 random data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<float> Points = tosingle(rand(3, 10));         
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // plot original function points
                     new LinePlot(Points, lineColor:Color.Blue, markerStyle: MarkerStyle.Dot),
                     // plot smooth Spline plot
                     new SplinePlot(X:Points[0,full], Y:Points[1,full], Z:Points[2,full], lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:4)
                });
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input arguments <paramref name="X"/> or <paramref name="Y"/> have different 
             sizes, or one of them is not provided; if <paramref name="resolution"/> is less than or equals 0; if the number of 
             data dimensions is larger than 2 and no <paramref name="resolution"/> is specified.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Object,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.DashStyle,System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Drawing.MarkerStyle,System.Nullable{System.Int32})">
             <summary>
             Constructor defines SplinePlot on the basis of the vectors <paramref name="X"/> and <paramref name="Y"/>.
             </summary>
             <param name="X"> Vector that contains X values.</param>
             <param name="Y"> Vector that contains Y values.</param>
             <param name="Z"> Vector that contains Z values.</param>
             <param name="tag">[optional] Tag that identifies the spline plot in the scene.</param>
             <param name="lineColor">[optional] Line color, default: auto.</param>
             <param name="lineStyle">[optional] Line style, default: solid.</param>
             <param name="lineWidth">[optional] Line width, default: 1px.</param>
             <param name="markerColor">[optional] Marker color, default: auto.</param>
             <param name="markerStyle">[optional] Marker style, default: none.</param>
             <param name="resolution">[optional] Resolution indicates a factor of the number of additional query points 
             that are created, default: 1.</param>       
             <remarks>
             <para> Query points are the points between two key points. If the <paramref name="resolution"/> is set to null, it will be calculated automatically based on
             the current panel size and number of visible points.</para>   
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 10 random data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<double> Points = rand(3, 10);         
            
                // setup the plot cube ... 
                ilPanel1.Scene.Add(new PlotCube(twoDMode: false) 
                {
                     // plot original function points
                     new LinePlot(Points, lineColor:Color.Blue, markerStyle: MarkerStyle.Dot),
                     // plot smooth Spline plot
                     new SplinePlot(X:Points[0,full], Y:Points[1,full], Z:Points[2,full], lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:4)
                });
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input arguments <paramref name="X"/> or <paramref name="Y"/> have different 
             sizes, or one of them is not provided; if <paramref name="resolution"/> is less than or equals 0; if the number of 
             data dimensions is larger than 2 and no <paramref name="resolution"/> is specified.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.Update(ILNumerics.InArray{System.Single})">
             <summary>
             Call this method to update key positions of a recently created SplinePlot object
             </summary>
             <param name="positions">[1 x n], [2 x n] or [3 x n] matrix.</param>
             /// <remarks>
             <para><paramref name="positions"/> defines points to plot as X,Y,Z in form of matrix with size [3 x m]. Where m is the number of defined points.</para>
             <para>More than 4 points must be defined for the spline function calculation. Otherwise, use <see cref="T:ILNumerics.Drawing.Plotting.LinePlot"/> instead.</para>
             <para>The same resolution factor set in the constructor will be used.</para>
             <para>If the intput parameter <paramref name="positions"/> contains NaN values, they will be removed. Only if the input parameter <paramref name="positions"/> 
             is one dimensional, the NaN values will be replaced. In order to replace the NaN values, the number of grid points must be greater than 3 after
             the removal of the NaN values.</para>
             </remarks>
             
             <example><para>Creates and plots a smooth SplinePlot through 7 random data points. Use this example in a Windows Forms Application project.</para>        
             <code>
             <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
                // define a function in 3D space
                Array<float> Points = tosingle(rand(3, 7));         
            
                // setup the plot cube ...
                 var pc = ilPanel1.Scene.Add(new PlotCube(twoDMode: false));
                 
                // plot smooth Spline plot with resolution 2
                 var mySplinePlot = pc.Add(new SplinePlot(Points, lineColor: Color.Red, markerStyle: MarkerStyle.Dot, resolution:2));
                 
                 // change spline resolution and update plot using new points
                 Points = tosingle(rand(3, 15));
                 mySplinePlot.Update(Points);
                 mySplinePlot.Resolution = 20;
                
            }
            ]]></code>
            </example>
            
             <exception cref="T:System.ArgumentException">If input argument <paramref name="positions"/> have wrong size or shape, or item is not provided.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.BeginVisit(ILNumerics.Drawing.RenderParameter)">
            <summary>
            Computation of additional vertices.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy of SplinePlot.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.Copy">
            <summary>
            Creates a copy of SplinePlot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            Performs synchronization.
            </summary>
            <param name="copy"></param>
            <param name="syncParams"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.ConfigureLegendVisual(ILNumerics.Drawing.Group,System.Int32)">
            <summary>
            Creates visual representation for the line
            </summary>
            <param name="renderArea">Root group node for visual output; must provide coord system [0,0,0] -> [1,1,1]</param>
            <param name="subItemID"></param>
            <remarks>This function is used by legends for rendering</remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.HandleNaNValues(ILNumerics.InArray{System.Single})">
            <summary>
            This method removes NaN values in [2 x n] and [3 x n] arrays and replaces NaN values in [1 x n] arrays.
            </summary>
            <param name="positions"> can be a [1 x n], [2 x n] or [3 x n] array.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.CalculateResolutionFor1dData(ILNumerics.InArray{System.Single},ILNumerics.Drawing.RenderParameter)">
            <summary>
            Contains a case discrimination for [1 x n] arrays, in order to only interpolate visible and necessary data points.
            </summary>
            <param name="V"> contains screen coordinates.</param>
            <param name="parameter"> contains renderer parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.DetermineIndexOfVisibleVertices(ILNumerics.InArray{System.Single},ILNumerics.Drawing.RenderParameter)">
            <summary>
            Based on the camera settings the indices of visible vertices are determined. For this purpose the positions of the screen coordinates are compared to the
            position of the camera.
            </summary>
            <param name="V"> contains screen coordinates.</param>
            <param name="parameter"> contains renderer parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.ComputeSecDerivativeOneVisibleVertex(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Int32})">
            <summary>
            Contains a case discrimination for one visible vertex to determine which vertices need to be considered in the interpolation. 
            </summary>
            <param name="V"> contains screen coordinates.</param>
            <param name="indexVisibleV"> contains indices of visible vertices.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.ComputeSecDerivativeTwoVisibleVertices(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Int32})">
            <summary>
             Contains a case discrimination for two visible vertices to determine which vertices need to be considered in the interpolation.
            </summary>
            <param name="V"> contains screen coordinates.</param>
            <param name="indexVisibleV"> contains indices of visible vertices.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.ComputeSecDerivativeThreeVisibleVertices(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Int32})">
            <summary>
            Contains a case discrimination for three visible vertices to determine which vertices need to be considered in the interpolation.
            </summary>
            <param name="V"> contains screen coordinates.</param>
            <param name="indexVisibleV"> contains indices of visible vertices.</param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.SplinePlot.ComputeResolution(ILNumerics.InArray{System.Single},System.Single)">
            <summary>
            Computes resolution based on the square root function.
            </summary>
            <param name="VSecDerivative"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.StackedAreaPlot">
            <summary>
            A class used to create a stacked area plot. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.StackedAreaPlot.DefaultTag">
            <summary>
            Default tag used to identify the StackedAreaPlot object in the scene: "StackedAreaPlot".
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.StackedAreaPlot.AreaPlotTag">
            <summary>
            Default tag used to identify 
            </summary>
        </member>
        <member name="P:ILNumerics.Drawing.Plotting.StackedAreaPlot.AreaPlot">
            <summary>
            Provides a reference to the fill area plots of StackedAreaPlot.  
            </summary>
            <remarks><para>The <see cref="P:ILNumerics.Drawing.Plotting.StackedAreaPlot.AreaPlot"/> property allows direct access to the first area plot of StackedAreaPlot and therefore its fill area and border.
            It allows all configurations valid for general shapes, including access to the rendering 
            <see cref="P:ILNumerics.Drawing.Shape.Buffers"/>, like the <see cref="P:ILNumerics.Drawing.Shape.Positions"/> and <see cref="P:ILNumerics.Drawing.Shape.Colors"/> buffers,
            the solid <see cref="P:ILNumerics.Drawing.Drawable.Color"/> property, all mouse events and light configuration.</para>
            <para>High level functions of <see cref="T:ILNumerics.Drawing.Plotting.FillArea"/> modify internal data and therefore also the internal triangle strip 
            shape. Since <see cref="P:ILNumerics.Drawing.Plotting.StackedAreaPlot.AreaPlot"/> provides direct access to this shape, users must take care of potentially
            conflicting changes to the <see cref="P:ILNumerics.Drawing.Plotting.StackedAreaPlot.AreaPlot"/>, caused by manual changed and by changes due to the <see cref="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Nullable{System.Single})"/> 
            function.</para>
            </remarks>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.#ctor(ILNumerics.Drawing.Plotting.StackedAreaPlot)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.#ctor(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Boolean,System.Single,ILNumerics.Drawing.Plotting.Colormap,System.Nullable{System.Drawing.Color},System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Array{System.Int32},System.Object)">
            <summary>
            This constructor defines a stacked area plot on the basis of the arrays <see cref="!:X"/> and <see cref="!:Y"/>.  
            </summary>
            <param name="X">X is a [1 x n] row vector. It contains the x coordinates for the area plots.</param>
            <param name="Y">Y is a [m x n] matrix. For the stacked area plot, this matrix contains vertical distances. 
            Here, each row is added to the previous row to create the stacked area plot. For the layered area plot, this matrix
            contains the vertical positions for each area plot.</param>
            <param name="isLayeredAreaPlot"> If set to true, a layered area plot is created, default: false.</param>
            <param name="spacing">[optional] Only for LayeredAreaPlots: Spacing defines the distance between the area plots on the Z-axis, default: 0.05.</param>
            <param name="colormap">[optional] Colormap is used to map the positions of the area plots on the Z-axis.
            The Z positions are computed based on the input parameter <see cref="!:spacing"/>. Default: Colormaps.ILNumerics.</param>
            <param name="lineColor">[optional] Line color, default: Colormaps.ILNumerics.</param>
            <param name="lineWidth">[optional] Line Width, default: 1px.</param>
            <param name="fillColor">[optional] Fill Color.</param>
            <param name="transparency">[optional] Column vector that contains alpha values between 0 and 255 for each area plot. 0 indicates full transparency,
            while 255 represents no transparency.</param>
            <param name="tag">[optional] identifies StackedAreaPlot in the scene graph, default: StackedAreaPlot.</param>
            <remarks>
            <para> Each row of <paramref name="Y"/> and <paramref name="transparency"/> describes a single area plot. Hence, 
            <paramref name="Y"/> and <paramref name="transparency"/> must have a matching number of rows.</para>
            <para> By default, both the fill areas and borders of the area plot are colored in on the basis of a colormap. By assigning a value to 
            <paramref name="lineColor"/> all lines receive the same color. The same applies to <paramref name="fillColor"/>. Use <paramref name="transparency"/> to better
            distinguish the area plots.</para>     
            </remarks>
            <code>
            <![CDATA[
             private void ilPanel1_Load(object sender, EventArgs e) {
             Array<float> X = linspace<float>(0, pi, 100);
             Array<float> Y = sin(X);
             Y[1,full] = Y[0,full] + 0.5f;
             Y[2,full] = Y[0,full] + 1;
             Y[3,full] = Y[0,full] + 1.5f;
             Y[4,full] = Y[0,full] + 2;
             Y[5,full] = Y[0,full] + 2.5f;
             Y[6,full] = Y[0,full] + 3;
             Y[7,full] = Y[0,full] + 3.5f;
             var plotCube = ilPanel1.Scene.Add(new PlotCube(twoDMode: false));
             var stackedAreaPlot = plotCube.Add(new StackedAreaPlot(X, Y, colormap: Colormaps.Spring));
             } 
            ]]></code>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is empty.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is not a row vector.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is not a matrix.</exception>
            <exception cref="T:System.ArgumentException">If input parameters <paramref name="X"/> and <paramref name="Y"/> do not have the same number of columns.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="transparency"/> is not a column vector.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="transparency"/> does not have same number of rows as the input parameter
            <paramref name="Y"/>.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="spacing"/> is less than 0.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.#ctor(ILNumerics.InArray{System.Double},ILNumerics.InArray{System.Double},System.Boolean,System.Single,ILNumerics.Drawing.Plotting.Colormap,System.Nullable{System.Drawing.Color},System.Int32,System.Nullable{System.Drawing.Color},ILNumerics.Array{System.Int32},System.Object)">
            <summary>
            This constructor defines a stacked area plot on the basis of the arrays <see cref="!:X"/> and <see cref="!:Y"/> (from double precision).
            </summary>
            <param name="X">X is a [1 x n] row vector. It contains the x coordinates for the area plots.</param>        
            <param name="Y">Y is a [m x n] matrix. For the stacked area plot, this matrix contains vertical distances. 
            Here, each row is added to the previous row to create the stacked area plot. For the layered area plot, this matrix
            contains the vertical positions for each area plot.</param>
            <param name="isLayeredAreaPlot"> If set to true, a layered area plot is created, default: false.</param>
            <param name="spacing">[optional] Only for LayeredAreaPlots: Spacing defines the distance between the area plots on the Z-axis, default: 0.05.</param>
            <param name="colormap">[optional] Colormap is used to map the positions of the area plots on the Z-axis. 
            The Z positions are computed based on the input parameter <see cref="!:spacing"/>. Default: Colormaps.ILNumerics.</param>
            <param name="lineColor">[optional] Line color, default: Colormaps.ILNumerics.</param>
            <param name="lineWidth">[optional] Line Width, default: 1px.</param>
            <param name="fillColor">[optional] Fill Color.</param>
            <param name="transparency">[optional] Column vector that contains alpha values between 0 and 255 for each area plot. 0 indicates full transparency,
            while 255 represents no transparency.</param>
            <param name="tag">[optional] identifies StackedAreaPlot in the scene graph, default: StackedAreaPlot.</param>
            <remarks>
            <para> Each row of <paramref name="Y"/> and <paramref name="transparency"/> describes a single area plot. Hence, 
            <paramref name="Y"/> and <paramref name="transparency"/> must have a matching number of rows.</para>
            <para> By default, both the fill areas and borders of the area plot are colored in on the basis of a colormap. By assigning a value to 
            <paramref name="lineColor"/> all lines receive the same color. The same applies to <paramref name="fillColor"/>. Use <paramref name="transparency"/> to better
            distinguish the area plots.</para>        
            </remarks>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            Array<double> X = linspace<double>(0, 9, 10);
            Array<double> Y = new double[,] { { 1, 3, 2, 3, 4, 2, 3, 2, 5, 2 }, { 3, 4, 3, 5, 5, 4, 3, 3, 4, 5 }, { 2, 6, 5, 6, 7, 7, 7, 6, 5, 4 }, { 8, 7, 9, 8, 8, 9, 8, 6, 7, 6 } };
            Array<int> transparency = new int[] { 105, 155, 205, 255 };
            var plotCube = ilPanel1.Scene.Add(new PlotCube(twoDMode: false));
            var stackedAreaPlot = plotCube.Add(new StackedAreaPlot(X, Y.T, fillColor: Color.Salmon, transparency: transparency, lineColor: Color.Brown));
            }
            ]]></code>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is empty.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is not a row vector.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is not a matrix.</exception>
            <exception cref="T:System.ArgumentException">If input parameters <paramref name="X"/> and <paramref name="Y"/> do not have the same number of columns.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="transparency"/> is not a column vector.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="transparency"/> does not have same number of rows as the input parameter
            <paramref name="Y"/>.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="spacing"/> is less than 0.</exception>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.Update(ILNumerics.InArray{System.Single},ILNumerics.InArray{System.Single},System.Nullable{System.Single})">
            <summary>
            Call this method to update the positions of the area plots.
            </summary>
            <param name="X">[optional] X is a [1 x n] row vector. It contains the x coordinates for the area plots.</param>      
            <param name="Y">[optional] Y is a [m x n] matrix. For the stacked area plot, this matrix contains vertical distances. 
            Here, each row is added to the previous row to create the stacked area plot. For the layered area plot, this matrix
            contains the vertical positions for each area plot.</param>
            <param name="spacing">[optional] Spacing defines the distance between the area plots on the Z-axis.</param>
            <code>
            <![CDATA[
            private void ilPanel1_Load(object sender, EventArgs e) {
            Array<float> X = linspace<float>(-5, 0, 20);
            Array<float> Y = ones<float>(3, 20);
            Y[1,full] = Y[1,full] + 1;
            Y[2,full] = Y[2,full] + 2;
            var plotCube = ilPanel1.Scene.Add(new PlotCube(twoDMode: false));
            var stackedAreaPlot = plotCube.Add(new StackedAreaPlot(X, Y, lineColor: Color.Black));
            Y = -tosingle(rand(3, 20));
            stackedAreaPlot.Update(Y: Y, spacing: 0.75f);
            }
            ]]></code>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is empty.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="X"/> is not a matrix.</exception> 
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="Y"/> is not a matrix.</exception>
            <exception cref="T:System.ArgumentException">If input parameters <paramref name="X"/> and <paramref name="Y"/> do not have the same number of columns.</exception>
            <exception cref="T:System.ArgumentException">If input parameter <paramref name="spacing"/> is less than 0.</exception> 
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.Copy">
            <summary>
            Deep copy of this surface object to a new object, sharing buffers.
            </summary>      
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.CreateSynchedCopy(ILNumerics.Drawing.Node)">
            <summary>
            Creates a synchronized copy of StackedAreaPlot.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ILNumerics.Drawing.Plotting.StackedAreaPlot.Synchronize(ILNumerics.Drawing.Node,ILNumerics.Drawing.SyncParams)">
            <summary>
            [Internal use] Synchronize this object with the rendering scene tree.
            </summary>
            <param name="copy">Any preexisting copy of this object.</param>
            <param name="syncParams"></param>
            <returns>Synched / up to-date copy.</returns>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.BarPlotStyle">
            <summary>
            Bar plot drawing styles.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotStyle.grouped">
            <summary>
            Display one group for each row Y [Default].
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotStyle.stacked">
            <summary>
            Display one bar for each row Y, where each bar from row Y is stacked one another. Bar height is a sum of all elements in each row Y.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotStyle.detached">
            <summary>
            Display each 3D bar detached one another along Z.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotStyle.hist">
            <summary>
            Display each bar in histogram format. Each bar touch one another.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.BarPlotStyle.histc">
            <summary>
            Display each bar in histogram format. Each bar touch one another. Each bar is centered over working axis ticks.
            </summary>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.Continent">
            <summary>
            Continents.
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.North_America">
            <summary>
            Includes the countries: 
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.South_America">
            <summary>
            Includes the countries:
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.Africa">
            <summary>
            Includes the countries:
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.Antarctica">
            <summary>
            Includes the countries:
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.Oceania">
            <summary>
            Includes the countries:
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.Europe">
            <summary>
            Includes the countries: 
            </summary>
        </member>
        <member name="F:ILNumerics.Drawing.Plotting.Continent.Asia">
            <summary>
            Includes the countries:
            </summary>
        </member>
        <member name="T:ILNumerics.Drawing.Plotting.Country">
            <summary>
            Countries.
            </summary>
        </member>
        <member name="T:ILNumerics.Toolboxes.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILNumerics.Toolboxes.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILNumerics.Toolboxes.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILNumerics.Toolboxes.Properties.Resources.worldGeometryIndexFile">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:ILNumerics.Toolboxes.Properties.Resources.worldGeometryMainFile">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
    </members>
</doc>
